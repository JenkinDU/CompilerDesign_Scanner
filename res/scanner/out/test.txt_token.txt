Line 1:1 CLASS class 
Line 1:2 ID testfile 
Line 3:1 PROGRAM program 
Line 4:1 OPENCMT /* 
Line 6:1 CLOSECMT */ 
Line 7:1 ID public 
Line 7:2 ID void 
Line 7:3 ID main 
Line 7:4 OPENPAR ( 
Line 7:5 INT int 
Line 7:6 ID xyz_ 
Line 7:7 CLOSEPAR ) 
Line 7:8 OPENBRACE { 
Line 8:1 RESERVED_FLOAT float 
Line 8:2 ID abc_234 
Line 8:3 SEMICOLON ; 
Line 9:1 IF if 
Line 9:2 OPENPAR ( 
Line 9:3 ID ifthen 
Line 9:4 CLOSEPAR ) 
Line 9:5 OPENBRACE { 
Line 10:1 PUT put 
Line 10:2 ALPHANUM _ 
Line 10:3 ALPHANUM _ 
Line 10:4 ID bacde___ 
Line 10:5 ASSGN = 
Line 10:6 FLOAT 1234.56 
Line 10:7 SEMICOLON ; 
Line 11:1 GET get 
Line 11:2 ID bacde___ 
Line 11:3 ASSGN = 
Line 11:4 FLOAT 1234.56 
Line 11:5 DOT . 
Line 11:6 INTEGER 0 
Line 11:7 INTEGER 0 
Line 11:8 ID ab 
Line 11:9 SEMICOLON ; 
Line 12:1 ID floatfl 
Line 12:2 ASSGN = 
Line 12:3 FLOAT 0.12 
Line 12:4 FLOAT 0.23 
Line 12:5 SEMICOLON ; 
Line 13:1 INT int 
Line 13:2 ASSGN = 
Line 13:3 FLOAT 0.12 
Line 13:4 DOT . 
Line 13:5 INTEGER 23 
Line 13:6 SEMICOLON ; 
Line 14:1 INT int 
Line 14:2 ID a 
Line 14:3 ASSGN = 
Line 14:4 FLOAT 0.001 
Line 14:5 INTEGER 0 
Line 14:6 FLOAT 0.201 
Line 15:1 CLOSEBRACE } 
Line 15:2 ELSE else 
Line 15:3 OPENBRACE { 
Line 16:1 ID abcc 
Line 16:2 PLUS + 
Line 16:3 ASSGN = 
Line 16:4 ID ced 
Line 16:5 SEMICOLON ; 
Line 17:1 ID abc 
Line 17:2 EQUAL == 
Line 17:3 ID abc 
Line 17:4 SEMICOLON ; 
Line 18:1 ID abc 
Line 18:2 MINUS - 
Line 18:3 ASSGN = 
Line 18:4 OPENPAR ( 
Line 18:5 INT int 
Line 18:6 PLUS + 
Line 18:7 RESERVED_FLOAT float 
Line 18:8 CLOSEPAR ) 
Line 18:9 SEMICOLON ; 
Line 19:1 ID ced 
Line 19:2 STAR * 
Line 19:3 ID eaf 
Line 19:4 ASSGN = 
Line 19:5 ID cde 
Line 19:6 SLASH / 
Line 19:7 ID acd 
Line 19:8 SEMICOLON ; 
Line 20:1 ID a 
Line 20:2 AND and 
Line 20:3 ID b 
Line 20:4 NOT not 
Line 20:5 ID c 
Line 20:7 GREATEQ >= 
Line 20:8 ID c 
Line 20:9 OR or 
Line 20:10 ID d 
Line 20:11 SEMICOLON ; 
Line 21:1 FLOAT 0.0 
Line 21:2 DOT . 
Line 21:3 FLOAT 0.0 
Line 22:1 INTEGER 0 
Line 22:2 INTEGER 0 
Line 22:3 FLOAT 0.0001 
Line 22:4 ID asdb 
Line 23:1 CLOSEBRACE } 
Line 24:1 INTEGER 1234 
Line 24:2 INTEGER 0 
Line 24:3 ID xff 
Line 25:1 CMT // 
Line 26:1 INTEGER 136 
Line 27:1 INT int 
Line 27:2 ID var1 
Line 27:3 OPENBRACKET [ 
Line 27:4 INTEGER 4 
Line 27:5 CLOSEBRACKET ] 
Line 27:6 OPENBRACKET [ 
Line 27:7 INTEGER 5 
Line 27:8 CLOSEBRACKET ] 
Line 27:9 OPENBRACKET [ 
Line 27:10 INTEGER 7 
Line 27:11 CLOSEBRACKET ] 
Line 27:12 OPENBRACKET [ 
Line 27:13 INTEGER 8 
Line 27:14 CLOSEBRACKET ] 
Line 27:15 OPENBRACKET [ 
Line 27:16 INTEGER 9 
Line 27:17 CLOSEBRACKET ] 
Line 27:18 OPENBRACKET [ 
Line 27:19 INTEGER 1 
Line 27:20 CLOSEBRACKET ] 
Line 27:21 OPENBRACKET [ 
Line 27:22 INTEGER 0 
Line 27:23 CLOSEBRACKET ] 
Line 27:24 SEMICOLON ; 
Line 28:1 RESERVED_FLOAT float 
Line 28:2 ID var2 
Line 28:3 SEMICOLON ; 
Line 29:1 INT int 
Line 29:2 ID findMax 
Line 29:3 OPENPAR ( 
Line 29:4 INT int 
Line 29:5 ID array 
Line 29:6 OPENBRACKET [ 
Line 29:7 INTEGER 100 
Line 29:8 CLOSEBRACKET ] 
Line 29:9 CLOSEPAR ) 
Line 30:1 OPENBRACE { 
Line 31:1 INT int 
Line 31:2 ID maxValue 
Line 31:3 SEMICOLON ; 
Line 32:1 INT int 
Line 32:2 ID idx 
Line 32:3 SEMICOLON ; 
Line 33:1 ID maxValue 
Line 33:2 ASSGN = 
Line 33:3 ID array 
Line 33:4 OPENBRACKET [ 
Line 33:5 INTEGER 100 
Line 33:6 CLOSEBRACKET ] 
Line 33:7 SEMICOLON ; 
Line 34:1 FOR for 
Line 34:2 OPENPAR ( 
Line 34:3 INT int 
Line 34:4 ID idx 
Line 34:5 ASSGN = 
Line 34:6 INTEGER 99 
Line 34:7 SEMICOLON ; 
Line 34:8 ID idx 
Line 34:9 GT > 
Line 34:10 INTEGER 0 
Line 34:11 SEMICOLON ; 
Line 34:12 ID idx 
Line 34:13 ASSGN = 
Line 34:14 ID idx 
Line 34:15 MINUS - 
Line 34:16 INTEGER 1 
Line 34:17 CLOSEPAR ) 
Line 35:1 OPENBRACE { 
Line 36:1 IF if 
Line 36:2 OPENPAR ( 
Line 36:3 ID array 
Line 36:4 OPENBRACKET [ 
Line 36:5 ID idx 
Line 36:6 CLOSEBRACKET ] 
Line 36:7 GT > 
Line 36:8 ID maxValue 
Line 36:9 CLOSEPAR ) 
Line 36:10 THEN then 
Line 36:11 OPENBRACE { 
Line 37:1 ID maxValue 
Line 37:2 ASSGN = 
Line 37:3 ID array 
Line 37:4 OPENBRACKET [ 
Line 37:5 ID idx 
Line 37:6 CLOSEBRACKET ] 
Line 37:7 SEMICOLON ; 
Line 38:1 CLOSEBRACE } 
Line 38:2 ELSE else 
Line 38:3 OPENBRACE { 
Line 38:4 CLOSEBRACE } 
Line 38:5 SEMICOLON ; 
Line 39:1 CLOSEBRACE } 
Line 39:2 SEMICOLON ; 
Line 40:1 RETURN return 
Line 40:2 OPENPAR ( 
Line 40:3 ID maxValue 
Line 40:4 CLOSEPAR ) 
Line 40:5 SEMICOLON ; 
Line 41:1 CLOSEBRACE } 
Line 41:2 SEMICOLON ; 
Line 42:1 INT int 
Line 42:2 ID findMin 
Line 42:3 OPENPAR ( 
Line 42:4 INT int 
Line 42:5 ID array 
Line 42:6 OPENBRACKET [ 
Line 42:7 INTEGER 100 
Line 42:8 CLOSEBRACKET ] 
Line 42:9 CLOSEPAR ) 
Line 43:1 OPENBRACE { 
Line 44:1 INT int 
Line 44:2 ID minValue 
Line 44:3 SEMICOLON ; 
Line 45:1 INT int 
Line 45:2 ID idx 
Line 45:3 SEMICOLON ; 
Line 46:1 ID minValue 
Line 46:2 ASSGN = 
Line 46:3 ID array 
Line 46:4 OPENBRACKET [ 
Line 46:5 INTEGER 100 
Line 46:6 CLOSEBRACKET ] 
Line 46:7 SEMICOLON ; 
Line 47:1 FOR for 
Line 47:2 OPENPAR ( 
Line 47:3 INT int 
Line 47:4 ID idx 
Line 47:5 ASSGN = 
Line 47:6 INTEGER 1 
Line 47:7 SEMICOLON ; 
Line 47:8 ID idx 
Line 47:9 LESSEQ <= 
Line 47:10 INTEGER 99 
Line 47:11 SEMICOLON ; 
Line 47:12 ID idx 
Line 47:13 ASSGN = 
Line 47:14 OPENPAR ( 
Line 47:15 ID idx 
Line 47:16 CLOSEPAR ) 
Line 47:17 PLUS + 
Line 47:18 INTEGER 1 
Line 47:19 CLOSEPAR ) 
Line 48:1 OPENBRACE { 
Line 49:1 IF if 
Line 49:2 OPENPAR ( 
Line 49:3 ID array 
Line 49:4 OPENBRACKET [ 
Line 49:5 ID idx 
Line 49:6 CLOSEBRACKET ] 
Line 49:7 LT < 
Line 49:8 ID maxValue 
Line 49:9 CLOSEPAR ) 
Line 49:10 THEN then 
Line 49:11 OPENBRACE { 
Line 50:1 ID maxValue 
Line 50:2 ASSGN = 
Line 50:3 ID array 
Line 50:4 OPENBRACKET [ 
Line 50:5 ID idx 
Line 50:6 CLOSEBRACKET ] 
Line 50:7 SEMICOLON ; 
Line 51:1 CLOSEBRACE } 
Line 51:2 ELSE else 
Line 51:3 OPENBRACE { 
Line 51:4 CLOSEBRACE } 
Line 51:5 SEMICOLON ; 
Line 52:1 CLOSEBRACE } 
Line 52:2 SEMICOLON ; 
Line 53:1 RETURN return 
Line 53:2 OPENPAR ( 
Line 53:3 ID minValue 
Line 53:4 CLOSEPAR ) 
Line 53:5 SEMICOLON ; 
Line 54:1 CLOSEBRACE } 
Line 55:1 PROGRAM program 
Line 55:2 OPENBRACE { 
Line 56:1 ID id 
Line 56:2 NOTEQ <> 
Line 56:3 ID alpha 
Line 56:9 ID num 
Line 56:10 GREATEQ >= 
Line 56:11 ID num 
Line 56:12 COMMA , 
Line 56:13 SEMICOLON ; 
Line 56:14 DOT . 
Line 57:1 OPENCMT /* 
Line 57:2 CLOSECMT */ 
Line 58:1 CMT // 
Line 59:1 INT int 
Line 59:2 ID a 
Line 59:3 ASSGN = 
Line 59:4 OPENBRACKET [ 
Line 59:5 CLOSEBRACKET ] 
Line 59:6 OPENBRACKET [ 
Line 59:7 OPENBRACE { [No Close Pair]
Line 59:8 CLOSEBRACKET ] 
Line 59:9 OPENBRACKET [ [No Close Pair]
Line 59:10 CLOSEBRACE } 
Line 59:11 CLOSEBRACKET ] [No Open Pair]
Line 59:12 OPENPAR ( 
Line 59:13 OPENBRACE { [No Close Pair]
Line 59:14 CLOSEPAR ) 
Line 59:15 OPENPAR ( 
Line 59:16 CLOSEPAR ) 
Line 59:17 CLOSEPAR ) [No Open Pair]
Line 59:18 OPENPAR ( 
Line 59:19 CLOSEPAR ) 
Line 59:20 OPENPAR ( [No Close Pair]
Line 59:21 CLOSEBRACE } 
Line 59:22 CLOSEPAR ) [No Open Pair]
Line 59:23 SEMICOLON ; 
Line 60:1 ID function 
Line 60:2 OPENPAR ( 
Line 60:3 EQUAL == 
Line 60:4 EQUAL == 
Line 60:5 NOTEQ <> 
Line 60:6 EQUAL == 
Line 60:7 ASSGN = 
Line 60:8 GT > 
Line 60:9 GT > 
Line 60:10 GT > 
Line 60:11 GT > 
Line 60:12 LT < 
Line 60:13 NOTEQ <> 
Line 60:14 GT > 
Line 60:15 GT > 
Line 60:16 CLOSEPAR ) 
Line 60:17 OPENBRACE { 
Line 61:1 ID key 
Line 61:2 CLASS class 
Line 61:3 PLUS + 
Line 61:4 EQUAL == 
Line 61:5 EQUAL == 
Line 61:6 ID abc 
Line 61:7 MINUS - 
Line 61:8 ASSGN = 
Line 61:9 OPENPAR ( 
Line 61:10 INT int 
Line 61:11 PLUS + 
Line 61:12 RESERVED_FLOAT float 
Line 61:13 CLOSEPAR ) 
Line 61:14 SEMICOLON ; 
Line 62:1 CLOSEBRACE } 
Line 63:1 INT int 
Line 63:2 ID abc 
Line 63:3 ASSGN = 
Line 63:4 DOT . 
Line 63:5 INTEGER 0 
Line 63:6 INTEGER 0 
Line 63:7 INTEGER 0 
Line 63:8 INTEGER 0 
Line 63:9 FLOAT 0.1111 
Line 64:1 ID Hello 
Line 64:2 ID World 
Line 66:2 ID a 
Line 66:4 ID b 
Line 66:6 ID f 
Line 66:8 ID n 
Line 66:10 ID r 
Line 66:12 ID t 
Line 66:14 ID v 
Line 67:1 INTEGER 0 
Line 67:2 DOT . 
Line 67:3 ID dfsd 
Line 68:1 CLOSEBRACE } [No Open Pair]
Line 70:1 OPENCMT /* [No Close Pair]
