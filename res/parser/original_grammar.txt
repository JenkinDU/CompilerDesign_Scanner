<prog> 		::= <classDecl>*<progBody>

<classDecl> ::= class id {<varDecl>*<funcDef>*};

<progBody> 	::= program<funcBody>;<funcDef>*

<funcHead> 	::= <type>id(<fParams>)

<funcDef> 	::= <funcHead><funcBody>;

<funcBody>	::= {<varDecl>*<statement>*}

<varDecl>	::= <type>id<arraySize>*;

<statement>	::=	<assignStat>;
			|	if(<expr>)then<statBlock>else<statBlock>;
			|	for(<type>id<assignOp><expr>;<relExpr>;<assignStat>)<statBlock>;
			|	get(<variable>);
			|	put(<expr>);
			|	return(<expr>);
			
<assignStat>::= <variable><assignOp><expr>

<statBlock>	::= {<statement>*} | <statement> | ε

<expr>		::=	<arithExpr> | <relExpr>

<relExpr>	::=	<arithExpr><relOp><arithExpr>

<arithExpr>	::=	<arithExpr><addOp><term> | <term>

<sign>		::= + | -

<term>		::=	<term><multOp><factor> | <factor>

<factor>	::=	<variable>
			|	<idnest>*id(<aParams>)
			|	num
			|	(<arithExpr>)
			|	not<factor>
			|	<sign><factor>

<variable>	::=	<idnest>*id<indice>*

<idnest>	::=	id<indice>*.

<indice>	::=	[<arithExpr>]

<arraySize>	::=	[ integer ]

<type>		::=	int | float | id

<fParams>	::=	<type>id<arraySize>*<fParamsTail>* | ε

<aParams>	::=	<expr><aParamsTail>* | ε

<fParamsTail>::=	,<type>id<arraySize>*

<aParamsTail>::=	,<expr>

<assignOp>	::=		=

<relOp>		::=		== | <> | < | > | <= | >=

<addOp>		::=		+ | - | or

<multOp>	::=		* | / | and

id			::=		follows specification for identifiers found in assignment#1
num			::=		follows specification for “num“ found in assignment#1
integer		::=		follows specification for “integer“ found in assignment#1