1	prog → classDecl_list progBody	class, program
2	classDecl → class id sym_CreateClassScope { varDeclFunctDef_list } ; sym_EndScope	class
3	progBody → program sym_CreateProgram funcBody ; funcDef_list	program
4	funcDef → type sym_StoreType id sym_StoreId ( sym_StartFunction fParams ) sym_CreateFunction funcBody ;	id, float, int
5	funcBody → { funcBody_ } sym_EndScope	{
6	varDeclFunctDef_list → type sym_StoreType id sym_StoreId varDeclFunctDef_tail	id, float, int
7	varDeclFunctDef_list → ε	}
8	varDeclFunctDef_tail → ( sym_StartMemberFunction fParams ) sym_CreateFunction funcBody ; varDeclFunctDef_list	(
9	varDeclFunctDef_tail → arraySize_list ; sym_CreateVariable varDeclFunctDef_list	, ;
10	indiceIdnestList_tail → . id sem_PushVariableName indiceIdnestList_tail	.
11	indiceIdnestList_tail → [ arithExpr ] indiceIdnestList_tail	
12	indiceIdnestList_tail → ε sem_FinishVariable	=
13	varDeclStatement_tail → sym_StoreType id sym_StoreId arraySize_list ; sym_CreateVariable funcBody_	id
14	varDeclStatement_tail → sem_StartAssignmentStatment sem_PushVariableName indiceIdnestList_tail assignOp expr ; statement_list	., , =
15	funcBody_ → typeNumeric sym_StoreType id sym_StoreId arraySize_list ; sym_CreateVariable funcBody_	float, int
16	funcBody_ → id varDeclStatement_tail	id
17	funcBody_ → restOfStatment statement_list	for, if, get, put, return
18	funcBody_ → ε	}
19	statement → assignmentStatment	id
20	statement → restOfStatment	for, if, get, put, return
21	assignmentStatment → sem_StartAssignmentStatment variable_ assignOp expr ;	id
22	restOfStatment → for sem_StartForStatement ( type sym_StoreType sem_StartAssignmentStatment id sym_StoreId sym_CreateVariable sem_PushVariableName sem_FinishVariable assignOp expr ; relExpr ; sem_StartAssignmentStatment assignStat ) statBlock ;	for
23	restOfStatment → if sem_StartIfStatement ( expr ) then statBlock else statBlock ;	if
24	restOfStatment → get sem_StartGetStatement ( variable_ ) ;	get
25	restOfStatment → put sem_StartPutStatement ( expr ) ;	put
26	restOfStatment → return sem_StartReturnStatement ( expr ) ;	return
27	assignStat → variable_ assignOp expr	id
28	statBlock → { sem_StartBlock statement_list } sem_EndBlock	{
29	statBlock → sem_StartBlock statement sem_EndBlock	id, for, if, get, put, return
30	statBlock → ε	;, else
31	expr → sem_StartRelationExpression arithExpr exp_	(, floatValue, intValue, not, id, +, -
32	exp_ → relOp sem_PushRelationOperation sem_StartRelationExpression arithExpr sem_EndRelationExpression	<, <=, <>, ==, >, >=
33	exp_ → ε sem_EndRelationExpression	,, ;, )
34	relExpr → sem_StartRelationExpression arithExpr relOp sem_PushRelationOperation arithExpr sem_EndRelationExpression	(, floatValue, intValue, not, id, +, -
35	arithExpr → sem_StartAdditionExpression term arithExpr_	(, floatValue, intValue, not, id, +, -
36	arithExpr_ → addOp sem_PushAdditionOperation sem_StartAdditionExpression term arithExpr_	+, -, or
37	arithExpr_ → ε sem_EndAdditionExpression	, ), <, <=, <>, ==, >, >=, ;, ,
38	sign → +	+
39	sign → -	-
40	term → sem_StartMultiplicationExpression factor term_	(, floatValue, intValue, not, id, +, -
41	term_ → multOp sem_PushMultiplicationOperation sem_StartMultiplicationExpression factor term_	*, /, and
42	term_ → ε sem_EndMultiplicationExpression	+, -, or, , ), <, <=, <>, ==, >, >=, ;, ,
43	factor → ( arithExpr )	(
44	factor → floatValue sem_PushFloatLiteral	floatValue
45	factor → intValue sem_PushIntLiteral	intValue
46	factor → not factor	not
47	factor → variable_ factor_	id
48	factor → sign factor	+, -
49	variable_ → id sem_PushVariableName indice_list idnest_list_	id
50	idnest_list_ → idnest_ idnest_list_	.
51	idnest_list_ → ε sem_FinishVariable	(, =, ), *, /, and, +, -, or, , <, <=, <>, ==, >, >=, ;, ,
52	idnest_ → . id indice_list	.
53	factor_ → sem_StartFunctionCall ( aParams ) sem_EndFunctionCall	(
54	factor_ → ε	*, /, and, +, -, or, , ), <, <=, <>, ==, >, >=, ;, ,
55	indice → [ arithExpr ]	
56	arraySize → [ intValue sym_StoreDimension ]	
57	type → id	id
58	type → typeNumeric	float, int
59	typeNumeric → float	float
60	typeNumeric → int	int
61	fParams → type sym_StoreType id sym_StoreId arraySize_list sym_AddFunctionParameter fParamsTail_list	id, float, int
62	fParams → ε	)
63	aParams → expr aParamsTail_list	(, floatValue, intValue, not, id, +, -
64	aParams → ε	)
65	fParamsTail → , type sym_StoreType id sym_StoreId arraySize_list sym_AddFunctionParameter	,
66	aParamsTail → , expr	,
67	classDecl_list → classDecl classDecl_list	class
68	classDecl_list → ε	program
69	funcDef_list → funcDef funcDef_list	id, float, int
70	funcDef_list → ε	$
71	statement_list → statement statement_list	id, for, if, get, put, return
72	statement_list → ε	}
73	arraySize_list → arraySize arraySize_list	
74	arraySize_list → ε	,, ;, )
75	indice_list → indice indice_list	
76	indice_list → ε	., (, =, ), *, /, and, +, -, or, , <, <=, <>, ==, >, >=, ;, ,
77	fParamsTail_list → fParamsTail fParamsTail_list	,
78	fParamsTail_list → ε	)
79	aParamsTail_list → aParamsTail aParamsTail_list	,
80	aParamsTail_list → ε	)
81	assignOp → =	=
82	relOp → <	<
83	relOp → <=	<=
84	relOp → <>	<>
85	relOp → ==	==
86	relOp → >	>
87	relOp → >=	>=
88	addOp → +	+
89	addOp → -	-
90	addOp → or	or
91	multOp → *	*
92	multOp → /	/
93	multOp → and	and