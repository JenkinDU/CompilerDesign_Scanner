/**
 * full grammar test program code
 * 
 * Change the <classDecl> grammar, there is no order of <varDecl>*<funcDef>*
 * So, funcDef can be the first show
 */
//<classDecl> ::= class id {<varDecl>*<funcDef>*};
class Utility {
//	<funcDef>	::= <funcHead><funcBody>;
//	<funcHead>	::= <type>id(<fParams>)
	Custome customeFunc(Custome id, float array[100], int mult[0][0][0][0][0]) {
/** 
 * Change the <funcBody> grammar, there is no order of <varDecl>*<statement>* 
 */
//		<funcBody>	::= {<varDecl>*<statement>*}
//		<statement>	::=	<assignStat>; |	if(<expr>)then<statBlock>else<statBlock>; 
//					|	for(<type>id<assignOp><expr>;<relExpr>;<assignStat>)<statBlock>; 
//					| get(<variable>); | put(<expr>); | return(<expr>);
		if((variable[1].id[2] and 100.0) or variable[1].id[2] and 100.0 == variable[0]+not(+id(id[0]))/not -variable[0].id(v and 100.0)) then {
//			<statBlock>	::= {<statement>*} | <statement> | ε
			value = id[0][1]+not(+id[1](id[0]));
//			for(<type>id<assignOp><expr>;<relExpr>;<assignStat>)<statBlock>; 
			for(id id=not value[0]; value(id <> 5) <= not -id[0]; value[0]=value[1].v() ) {
				if((id[1].id[2] and 100.0) or id[1].id[2] and 100.0 == id[0]+not(+id[0](id[1]))/not -variable[0].v(v[1].id and 100.0)) then {
					get(maxValue);
			        put(minValue);
				} else; //nothing is OK
			};
		} else //no {} is OK
			get(maxValue);
		;
		return (maxValue);
		get(maxValue[0].A.B.C[1]);
        put(not(id[1] and 100.0));
        variable = utility.getCustomValue(value);
		
	};
	Custome emptyFunc(Custome id, float array[100]) { };
	
    int var1[4][5][7][8][9][1][0];
    float var2;
//    simple function
	int findMax(int array[100]) {
        int maxValue;
        maxValue = array[100];
        for (int idx = 99; idx > 0; idx = idx - 1) {
            if (array[idx] > maxValue) then {
                maxValue = array[idx];
            } else {};
            put(maxValue);
            put(minValue);
        };
        return (maxValue);
    };
    int idx;
//  simple function
    int findMin(int array[100]) {
        int minValue;
        int idx;
        minValue = array[100];
        for (int idx = 1; idx <= 99; idx = (idx) + 1) {
            if (array[idx] < maxValue) then {
                maxValue = array[idx];
            } else {};
        };
        return (minValue);
    };
    int idx;
};
program {
//	<funcBody>	::= {<varDecl>*<statement>*}
/** There is no order of <varDecl>*<statement>* */
	if((id[1].id[2][3] and 100.0)  == not -id(id[1] and 100.0)) then {
//					<statBlock>	::= {<statement>*} | <statement> | ε
		value = id[0][1][2]+not(+id[0][1](id[0][1]));
//					for(<type>id<assignOp><expr>;<relExpr>;<assignStat>)<statBlock>; 
		for(id id=not value[0]; value(id <> 5) <= not -id[0]; value[0]=value[1].v() ) {
			if((id[1].id[2] and 100.0) or id[1].id[2] and 100.0 == id[0]+not(+id[0](id[1]))/not -variable[0].v(v[1].id and 100.0)) then {
				get(maxValue);
		        put(minValue);
			} else; //nothing is OK
		};
	} else //no {} is OK
		get(maxValue);
	;
	return (maxValue);
	get(maxValue[0].A.B.C[1]);
    put(not(id[1] and 100.0));
};
float randomize() {
    float value;
    value = 100 * (2 + 3.0 / 7.0006);
    value = 1.05 + ((2.04 * 2.47) - 3.0) + 7.0006;
    return (value);
};
//same with <funcDef>
Custom getCustomValue() {
	int sample[100];
    int idx;
    int maxValue;
    int minValue;
    Utility utility;
    Utility arrayUtility[2][3][6][7];
    for (int t = 0; t <= 100; t = t + 1) {
//    	if(<expr>)then<statBlock>else<statBlock>;
    	if((id[1].id[2] and 100.0) or id[1].id[2] and 100.0 == id[0]+not(+id[0](id[1]))/not -variable[0].v(v[1].id and 100.0)) then {
			get(maxValue);
	        put(minValue);
	        get(sample[t]);
	        sample[t] = (sample[t] * randomize());
		} else {};
    };
    return (value);
};