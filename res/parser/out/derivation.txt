 $ prog                                 		r0:prog → A progBody   		A progBody
 $ progBody A                           		r1:A → classDecl A     		classDecl A progBody
 $ progBody A classDecl                 		r2:classDecl → class id { V } ;            		class id { V } ; A progBody
 $ progBody A ; } V { id class          		class
 $ progBody A ; } V { id                		id
 $ progBody A ; } V {                   		{
 $ progBody A ; } V                     		r3:V → T V             		class id { T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → id           		class id { id id K V } ; A progBody
 $ progBody A ; } V K id id             		id
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → M               		class id { id id M V } ; A progBody
 $ progBody A ; } V M                   		r10:M → ( fParams ) funcBody ;              		class id { id id ( fParams ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) fParams (                                      		(
 $ progBody A ; } V ; funcBody ) fParams                                        		r40:fParams → type id F I                   		class id { id id ( type id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id type                                    		r39:type → id           		class id { id id ( id id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id id                                      		id
 $ progBody A ; } V ; funcBody ) I F id 		id
 $ progBody A ; } V ; funcBody ) I F    		r19:F → ε               		class id { id id ( id id I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I      		r41:I → fParamsTail I   		class id { id id ( id id fParamsTail I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I fParamsTail                                  		r44:fParamsTail → , type id F               		class id { id id ( id id , type id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id type ,                                  		,
 $ progBody A ; } V ; funcBody ) I F id type                                    		r39:type → float        		class id { id id ( id id , float id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id float                                   		float
 $ progBody A ; } V ; funcBody ) I F id 		id
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → ε               		class id { id id ( id id , float id [ integer ] I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I      		r41:I → fParamsTail I   		class id { id id ( id id , float id [ integer ] fParamsTail I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I fParamsTail                                  		r44:fParamsTail → , type id F               		class id { id id ( id id , float id [ integer ] , type id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id type ,                                  		,
 $ progBody A ; } V ; funcBody ) I F id type                                    		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id int                                     		int
 $ progBody A ; } V ; funcBody ) I F id 		id
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I      		r41:I → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody )        		)
 $ progBody A ; } V ; funcBody          		r11:funcBody → { R }    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { R } ; V } ; A progBody
 $ progBody A ; } V ; } R {             		{
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → if ( expr ) then statBlock else statBlock ;     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( expr ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) expr ( if           		if
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) expr (              		(
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) expr                		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( arithExpr X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X arithExpr         		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( term Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y term            		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( factor Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z factor        		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( arithExpr ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) arithExpr ( 		(
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) arithExpr   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( term Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y term      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( factor Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor  		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H id                                        		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice                                    		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [                             		[
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr                               		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term                                  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor                              		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer                             		integer
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z                                     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y                                       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] 		]
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G     		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] idnest G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G idnest                                      		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H id .                                      		.
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H id                                        		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice                                    		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [                             		[
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr                               		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term                                  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor                              		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer                             		integer
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z                                     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y                                       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] 		]
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O       		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z         		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] multOp factor Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor multOp                                   		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and factor Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor and                                      		and
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor  		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num Z Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z num     		num
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y Z         		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num Y ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z ) Y           		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z )             		)
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z               		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y                 		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) addOp term Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y term addOp      		r48:addOp → or          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or term Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y term or         		or
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y term            		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or factor Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z factor        		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H id      		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H         		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id indice H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H indice  		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [                                   		[
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] arithExpr                                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y term                                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor                                    		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer                                   		integer
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y Z   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ]       		]
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H         		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G           		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] idnest G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G idnest    		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H id .    		.
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H id      		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H         		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id indice H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H indice  		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [                                   		[
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] arithExpr                                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y term                                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor                                    		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer                                   		integer
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y Z   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ] Y     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] H G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H ]       		]
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G H         		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] G O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O G           		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] O Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z O             		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z               		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] multOp factor Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z factor multOp 		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and factor Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z factor and    		and
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z factor        		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Z Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z num           		num
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y Z               		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Y X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X Y                 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num X ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) X                   		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num relOp arithExpr ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) arithExpr relOp     		r47:relOp → ==          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == arithExpr ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) arithExpr ==        		==
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) arithExpr           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == term Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y term              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor          		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H id        		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H           		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id indice H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H indice    		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] arithExpr [                                     		[
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] arithExpr                                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ term Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y Z factor                                      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y Z integer                                     		integer
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ]         		]
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H           		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G             		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O               		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y                   		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] addOp term Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y term addOp        		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + term Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y term +            		+
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y term              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor          		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor not      		not
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor          		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( arithExpr ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) arithExpr (   		(
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) arithExpr     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( term Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y term        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( factor Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z factor    		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( sign factor Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z factor sign                                       		r28:sign → +            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + factor Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z factor +  		+
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z factor    		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id H G O Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z O G H id  		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z O G H     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id G O Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z O G       		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id O Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z O         		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( aParams ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) aParams (                                       		(
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) aParams 		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( expr J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J expr  		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( arithExpr X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X arithExpr                                   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( term Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y term                                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( factor Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z factor                                  		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H id                                		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H                                   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id indice H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H indice                            		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ arithExpr ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr [                     		[
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ term Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z factor                      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z integer                     		integer
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ]                                 		]
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H                                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G                                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O                                       		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] X J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J X     		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] J ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z ) J       		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) Z Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z )         		)
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y Z           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) Y ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) Y             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z )               		)
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z                 		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) multOp factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor multOp   		r49:multOp → /          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor /        		/
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor          		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor not      		not
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor          		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not sign factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor sign     		r28:sign → -            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - factor Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor -        		-
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z factor          		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H id        		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H           		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id indice H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H indice    		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] arithExpr [                                     		[
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] arithExpr                                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ term Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y Z factor                                      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y Z integer                                     		integer
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ] Y       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H ]         		]
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H           		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G             		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] idnest G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G idnest      		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id H G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H id .      		.
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H id        		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G H           		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id G O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O G             		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id O Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z O               		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( aParams ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) aParams (     		(
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) aParams       		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( expr J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J expr        		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( arithExpr X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X arithExpr 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( term Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y term    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( factor Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor                                        		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id                                      		id
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O     		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z       		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id multOp factor Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor multOp                                 		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and factor Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor and                                    		and
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor                                        		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z num   		num
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num Y X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X Y         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num X J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J X           		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num J ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z ) J             		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) Z Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z )               		)
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y Z                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) Y ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then ) Y                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then statBlock else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else statBlock then )                     		)
 $ progBody A ; } V ; } R ; statBlock else statBlock then                       		then
 $ progBody A ; } V ; } R ; statBlock else statBlock                            		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E {                                		{
 $ progBody A ; } V ; } R ; statBlock else } E                                  		r16:E → assignStat ; E  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { assignStat ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; assignStat                     		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { variable assignOp expr ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; expr assignOp variable         		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id H G assignOp expr ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; expr assignOp G H id           		id
 $ progBody A ; } V ; } R ; statBlock else } E ; expr assignOp G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id G assignOp expr ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; expr assignOp G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id assignOp expr ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; expr assignOp                  		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = expr ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; expr =                         		=
 $ progBody A ; } V ; } R ; statBlock else } E ; expr                           		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = arithExpr X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X arithExpr                    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = term Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y term                       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = factor Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z factor                   		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H id                 		id
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H                    		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id indice H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H indice             		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ arithExpr ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr [      		[
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ term Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y term           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ factor Z Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y Z factor       		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer Z Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y Z integer      		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y Z              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ]                  		]
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H                    		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] indice H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H indice             		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ arithExpr ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr [      		[
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ term Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y term           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ factor Z Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y Z factor       		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer Z Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y Z integer      		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y Z              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer Y ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ] Y                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] H G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H ]                  		]
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G H                    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] G O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O G                      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] O Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z O                        		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z                          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y                            		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] addOp term Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y term addOp                 		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + term Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y term +                     		+
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y term                       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + factor Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z factor                   		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not factor Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z factor not               		not
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z factor                   		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( arithExpr ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) arithExpr (            		(
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( term Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( factor Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z factor             		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( sign factor Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z factor sign        		r28:sign → +            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + factor Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z factor +           		+
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H id           		id
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H              		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id indice H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H indice       		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ arithExpr ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr [                                        		[
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ term Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y term     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ factor Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z factor 		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z integer                                        		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ]            		]
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] G O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] O Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z O                  		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( aParams ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) aParams (        		(
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) aParams          		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( expr J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J expr           		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( arithExpr X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X arithExpr    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( term Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( factor Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z factor   		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H id 		id
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H    		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id indice H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H indice                                     		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ arithExpr ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] arithExpr [                              		[
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] arithExpr                                		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ term Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y term                                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z factor                               		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z integer                              		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z                                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y                                        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ]  		]
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O        		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X              		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] J ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z ) J                		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Z Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z )                  		)
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Y ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z ) Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) Z Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z )                        		)
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y Z                          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) Y X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X Y                            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) X ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; X                              		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ;                                		;
 $ progBody A ; } V ; } R ; statBlock else } E                                  		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; statement E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E statement                        		r20:statement → for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ;		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id type ( for         		for
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id type (             		(
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id type               		r39:type → id           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id assignOp expr ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id id                 		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id                    		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp                       		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = expr ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr =                              		=
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr                                		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = arithExpr X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X arithExpr                         		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = term Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y term                            		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = factor Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z factor                        		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not factor Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z factor not                    		not
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z factor                        		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H id                      		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H                         		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id indice H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H indice                  		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ arithExpr ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] arithExpr [           		[
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] arithExpr             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ term Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y term                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ factor Z Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y Z factor            		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer Z Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y Z integer           		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y Z                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ]                       		]
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H                         		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G                           		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O                             		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z                               		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y                                 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X                                   		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ;                                     		;
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr                                       		r25:relExpr → arithExpr relOp arithExpr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; arithExpr relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp arithExpr                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; term Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y term                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; factor Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z factor                    		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id H G O Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O G H id                  		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O G H                     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id G O Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O G                       		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id O Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O                         		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( aParams ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) aParams (               		(
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) aParams                 		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( expr J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J expr                  		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( arithExpr X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X arithExpr           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( term Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y term              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( factor Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z factor          		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id H G O Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O G H id        		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O G H           		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id G O Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O G             		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id O Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O               		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X                     		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id relOp arithExpr J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J arithExpr relOp       		r47:relOp → <>          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> arithExpr J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J arithExpr <>          		<>
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J arithExpr             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> term Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y term                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> factor Z Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y Z factor            		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer Z Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y Z integer           		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y Z                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J                       		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z )                         		)
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z                           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y                             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp                               		r47:relOp → <=          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr <=                                  		<=
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr                                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= term Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y term                                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor                                    		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor not                                		not
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor                                    		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not sign factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor sign                               		r28:sign → -            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor -                                  		-
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor                                    		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H id                                  		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H                                     		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id indice H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H indice                              		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ arithExpr ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] arithExpr [                       		[
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] arithExpr                         		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ term Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y term                            		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ factor Z Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y Z factor                        		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer Z Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y Z integer                       		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y Z                               		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y                                 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ]                                   		]
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H                                     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G                                       		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O 		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] Y ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ; Y     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; assignStat ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat ;       		;
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) assignStat         		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; variable assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp variable                                     		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H id                                       		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H  		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id indice H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H indice                                   		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ arithExpr ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] arithExpr [                            		[
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] arithExpr                              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ term Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y term                                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ factor Z Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y Z factor                             		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer Z Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y Z integer                            		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y Z                                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y                                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ]                                        		]
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G H  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] G assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp G    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] assignOp expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr assignOp      		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = expr ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr =             		=
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) expr               		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = arithExpr X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X arithExpr        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = term Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y term           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = factor Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z factor       		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H id     		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H        		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id indice H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H indice 		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ arithExpr ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] arithExpr [                                  		[
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] arithExpr                                    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ term Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y term                                       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ factor Z Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y Z factor                                   		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer Z Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y Z integer                                  		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y Z  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ]      		]
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G          		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] idnest G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G idnest   		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id H G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H id .   		.
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H id     		id
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G H        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id G O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O G          		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id O Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z O            		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( aParams ) Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z ) aParams (  		(
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z ) aParams    		r42:aParams → ε         		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) Z Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z )            		)
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y Z              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) Y X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X Y                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) X ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock ) X                  		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) statBlock ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock )                    		)
 $ progBody A ; } V ; } R ; statBlock else } E ; statBlock                      		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E {                          		{
 $ progBody A ; } V ; } R ; statBlock else } E ; } E                            		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { statement E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E statement                  		r20:statement → if ( expr ) then statBlock else statBlock ;     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( expr ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) expr ( if                        		if
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) expr (                           		(
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) expr                             		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( arithExpr X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X arithExpr                      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( term Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term                         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor                     		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( arithExpr ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) arithExpr (              		(
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) arithExpr                		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( term Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y term                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor               		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id             		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice         		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [  		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor   		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer  		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]              		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G                  		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] idnest G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G idnest           		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id .           		.
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id             		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice         		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [  		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor   		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer  		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]              		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G                  		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O                    		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z                      		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] multOp factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor multOp        		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor and           		and
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor               		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z num                  		num
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y                        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z )                          		)
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z                            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y                              		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) addOp term Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term addOp                   		r48:addOp → or          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or term Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term or                      		or
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term                         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor                     		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H id                   		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                      		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id indice H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H indice               		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [        		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor         		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer        		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ]                    		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G                        		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] idnest G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G idnest                 		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H id .                 		.
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H id                   		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                      		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id indice H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H indice               		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [        		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor         		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer        		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ]                    		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G                        		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O                          		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z                            		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] multOp factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor multOp              		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor and                 		and
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor                     		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z num                        		num
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z                            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y                              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X                                		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num relOp arithExpr ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) arithExpr relOp                  		r47:relOp → ==          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == arithExpr ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) arithExpr ==                     		==
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) arithExpr                        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == term Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term                           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                       		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id                     		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                        		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id indice H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H indice                 		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr [          		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr            		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ term Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y term               		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z factor           		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z integer          		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z                  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y                    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ]                      		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G                          		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O                            		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z                              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y                                		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] addOp term Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term addOp                     		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + term Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term +                         		+
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term                           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                       		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor not                   		not
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                       		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( arithExpr ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) arithExpr (                		(
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) arithExpr                  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( term Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y term                     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor                 		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( sign factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor sign            		r28:sign → +            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor +               		+
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor                 		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H id               		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H                  		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id indice H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H indice           		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ arithExpr ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] arithExpr [    		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ term Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ factor Z Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer Z Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z integer    		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ]                		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H                  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G                    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O                      		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( aParams ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) aParams (            		(
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) aParams              		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( expr J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J expr               		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( arithExpr X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X arithExpr        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( term Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y term           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( factor Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z factor       		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H id     		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H        		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id indice H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H indice 		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ arithExpr ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr [		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ term Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y term		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z factor		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z integer		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ]      		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G          		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O            		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X                  		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J                    		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z )                      		)
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z                        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y                          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z )                            		)
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z                              		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) multOp factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor multOp                		r49:multOp → /          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor /                     		/
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                       		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor not                   		not
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                       		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not sign factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor sign                  		r28:sign → -            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor -                     		-
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                       		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id                     		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                        		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id indice H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H indice                 		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr [          		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr            		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ term Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y term               		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z factor           		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z integer          		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z                  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y                    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ]                      		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G                          		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] idnest G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G idnest                   		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id .                   		.
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id                     		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G                          		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O                            		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( aParams ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) aParams (                  		(
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) aParams                    		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( expr J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J expr                     		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( arithExpr X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( term Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id           		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H              		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id indice H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H indice       		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ arithExpr ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr [		[
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ term Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y term     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z factor 		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z integer		integer
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ]            		]
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G                		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] idnest G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G idnest         		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id .         		.
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id           		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O                  		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z                    		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id multOp factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor multOp      		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor and         		and
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor             		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z num                		num
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X                        		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J                          		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z )                            		)
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z                              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y                                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then )                                  		)
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock then                                    		then
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else statBlock 		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E {     		{
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E       		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { statement E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E statement                                     		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( variable ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) variable ( get                            		get
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) variable (                                		(
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) variable                                  		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id H G ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) G H id                                    		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) G H                                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id G ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) G 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; )   		)
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ;     		;
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E       		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; statement E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E statement                                     		r20:statement → put ( expr ) ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( expr ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) expr ( put                                		put
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) expr (                                    		(
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) expr                                      		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( arithExpr X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X arithExpr                               		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( term Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y term                                  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( factor Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z factor                              		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id H G O Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O G H id                            		id
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O G H                               		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id G O Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O G                                 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id O Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O                                   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z                                     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y                                       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X 		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ; )   		)
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E ;     		;
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else } E       		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else statBlock ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else }         		}
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock else           		else
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ; statBlock                		r22:statBlock → ε       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; E } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; } E ;                          		;
 $ progBody A ; } V ; } R ; statBlock else } E ; } E                            		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; E } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else } E ; }                              		}
 $ progBody A ; } V ; } R ; statBlock else } E ;                                		;
 $ progBody A ; } V ; } R ; statBlock else } E                                  		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock else }                                    		}
 $ progBody A ; } V ; } R ; statBlock else                                      		else
 $ progBody A ; } V ; } R ; statBlock   		r22:statBlock → statement                   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else statement ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statement   		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( variable ) ; ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ; ) variable ( get                                  		get
 $ progBody A ; } V ; } R ; ; ) variable (                                      		(
 $ progBody A ; } V ; } R ; ; ) variable                                        		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id H G ) ; ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ; ) G H id  		id
 $ progBody A ; } V ; } R ; ; ) G H     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id G ) ; ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ; ) G       		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ; )         		)
 $ progBody A ; } V ; } R ; ;           		;
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → return ( expr ) ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( expr ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) expr ( return                                     		return
 $ progBody A ; } V ; } R ; ) expr (    		(
 $ progBody A ; } V ; } R ; ) expr      		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( arithExpr X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X arithExpr                                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( term Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( factor Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z factor                                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id H G O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O G H id                                    		id
 $ progBody A ; } V ; } R ; ) X Y Z O G H                                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id G O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O G 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X         		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; )           		)
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( variable ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) variable ( get                                    		get
 $ progBody A ; } V ; } R ; ) variable (                                        		(
 $ progBody A ; } V ; } R ; ) variable  		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H id    		id
 $ progBody A ; } V ; } R ; ) G H       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id indice H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H indice                                        		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ arithExpr ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] arithExpr [                                 		[
 $ progBody A ; } V ; } R ; ) G H ] arithExpr                                   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ term Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y term                                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ factor Z Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y Z factor                                  		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer Z Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y Z integer                                 		integer
 $ progBody A ; } V ; } R ; ) G H ] Y Z 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ]     		]
 $ progBody A ; } V ; } R ; ) G H       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G         		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] idnest G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G idnest  		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H id .  		.
 $ progBody A ; } V ; } R ; ) G H id    		id
 $ progBody A ; } V ; } R ; ) G H       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G         		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id idnest G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G idnest  		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H id .  		.
 $ progBody A ; } V ; } R ; ) G H id    		id
 $ progBody A ; } V ; } R ; ) G H       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G         		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id idnest G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G idnest  		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H id .  		.
 $ progBody A ; } V ; } R ; ) G H id    		id
 $ progBody A ; } V ; } R ; ) G H       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id indice H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H indice                                        		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ arithExpr ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] arithExpr [                                 		[
 $ progBody A ; } V ; } R ; ) G H ] arithExpr                                   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ term Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y term                                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ factor Z Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y Z factor                                  		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer Z Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y Z integer                                 		integer
 $ progBody A ; } V ; } R ; ) G H ] Y Z 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer Y ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ] Y   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] H G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G H ]     		]
 $ progBody A ; } V ; } R ; ) G H       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] G ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) G         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; )           		)
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → put ( expr ) ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( expr ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) expr ( put                                        		put
 $ progBody A ; } V ; } R ; ) expr (    		(
 $ progBody A ; } V ; } R ; ) expr      		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( arithExpr X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X arithExpr                                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( term Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( factor Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z factor                                      		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not factor Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z factor not                                  		not
 $ progBody A ; } V ; } R ; ) X Y Z factor                                      		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( arithExpr ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) arithExpr (                               		(
 $ progBody A ; } V ; } R ; ) X Y Z ) arithExpr                                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( term Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y term                                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( factor Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z factor                                		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H id                              		id
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H                                 		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id indice H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H indice                          		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ arithExpr ] H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ] arithExpr [                   		[
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ] arithExpr                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ term Y ] H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ] Y term                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ factor Z Y ] H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ] Y Z factor                    		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer Z Y ] H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ] Y Z integer                   		integer
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ] Y Z                           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer Y ] H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ] Y                             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] H G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H ]                               		]
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G H                                 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] G O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O G                                   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] O Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z O                                     		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z                                       		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] multOp factor Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z factor multOp                         		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and factor Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z factor and                            		and
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z factor                                		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num Z Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z num                                   		num
 $ progBody A ; } V ; } R ; ) X Y Z ) Y Z                                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num Y ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z ) Y 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z )   		)
 $ progBody A ; } V ; } R ; ) X Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X         		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; )           		)
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; Q id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id Q        		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id int      		int
 $ progBody A ; } V ; } R S id          		id
 $ progBody A ; } V ; } R S             		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F           		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; Q id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id Q        		r14:Q → float           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id float    		float
 $ progBody A ; } V ; } R S id          		id
 $ progBody A ; } V ; } R S             		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F           		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id P R } ; V } ; A progBody
 $ progBody A ; } V ; } R P id          		id
 $ progBody A ; } V ; } R P             		r15:P → id S            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id          		id
 $ progBody A ; } V ; } R S             		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F           		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id arraySize F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F arraySize 		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F ] integer [                                       		[
 $ progBody A ; } V ; } R ; F ] integer 		integer
 $ progBody A ; } V ; } R ; F ]         		]
 $ progBody A ; } V ; } R ; F           		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] arraySize F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F arraySize 		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F ] integer [                                       		[
 $ progBody A ; } V ; } R ; F ] integer 		integer
 $ progBody A ; } V ; } R ; F ]         		]
 $ progBody A ; } V ; } R ; F           		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id P R } ; V } ; A progBody
 $ progBody A ; } V ; } R P id          		id
 $ progBody A ; } V ; } R P             		r15:P → H G assignOp expr ;                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id H G assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp G H                                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id G assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp G                                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp                                       		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr =      		=
 $ progBody A ; } V ; } R ; expr        		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = arithExpr X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X arithExpr 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = term Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y term    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = factor Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z factor                                        		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H id                                      		id
 $ progBody A ; } V ; } R ; X Y Z O G H 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G   		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id idnest G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G idnest                                    		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H id .                                    		.
 $ progBody A ; } V ; } R ; X Y Z O G H id                                      		id
 $ progBody A ; } V ; } R ; X Y Z O G H 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O     		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( aParams ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) aParams (                                   		(
 $ progBody A ; } V ; } R ; X Y Z ) aParams                                     		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( expr J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J expr                                      		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( arithExpr X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X arithExpr                               		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( term Y X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X Y term                                  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( factor Z Y X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X Y Z factor                              		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id H G O Z Y X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X Y Z O G H id                            		id
 $ progBody A ; } V ; } R ; X Y Z ) J X Y Z O G H                               		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id G O Z Y X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X Y Z O G                                 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id O Z Y X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X Y Z O                                   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id Z Y X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X Y Z                                     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id Y X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X Y                                       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id X J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J X 		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id J ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z ) J   		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z )     		)
 $ progBody A ; } V ; } R ; X Y Z       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X           		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; V } ; A progBody
 $ progBody A ; } V ; }                 		}
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → T V             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → id           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id K V } ; A progBody
 $ progBody A ; } V K id id             		id
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → M               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id M V } ; A progBody
 $ progBody A ; } V M                   		r10:M → ( fParams ) funcBody ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( fParams ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) fParams (                                      		(
 $ progBody A ; } V ; funcBody ) fParams                                        		r40:fParams → type id F I                   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( type id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id type                                    		r39:type → id           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id id                                      		id
 $ progBody A ; } V ; funcBody ) I F id 		id
 $ progBody A ; } V ; funcBody ) I F    		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I      		r41:I → fParamsTail I   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id fParamsTail I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I fParamsTail                                  		r44:fParamsTail → , type id F               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , type id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id type ,                                  		,
 $ progBody A ; } V ; funcBody ) I F id type                                    		r39:type → float        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id float                                   		float
 $ progBody A ; } V ; funcBody ) I F id 		id
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I      		r41:I → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody )        		)
 $ progBody A ; } V ; funcBody          		r11:funcBody → { R }    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { R } ; V } ; A progBody
 $ progBody A ; } V ; } R {             		{
 $ progBody A ; } V ; } R               		r12:R → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; V } ; A progBody
 $ progBody A ; } V ; }                 		}
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → T V             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id K V } ; A progBody
 $ progBody A ; } V K id int            		int
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → S               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id S V } ; A progBody
 $ progBody A ; } V S                   		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id F ; V } ; A progBody
 $ progBody A ; } V ; F                 		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id arraySize F ; V } ; A progBody
 $ progBody A ; } V ; F arraySize       		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] F ; V } ; A progBody
 $ progBody A ; } V ; F ] integer [     		[
 $ progBody A ; } V ; F ] integer       		integer
 $ progBody A ; } V ; F ]               		]
 $ progBody A ; } V ; F                 		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] arraySize F ; V } ; A progBody
 $ progBody A ; } V ; F arraySize       		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] F ; V } ; A progBody
 $ progBody A ; } V ; F ] integer [     		[
 $ progBody A ; } V ; F ] integer       		integer
 $ progBody A ; } V ; F ]               		]
 $ progBody A ; } V ; F                 		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] arraySize F ; V } ; A progBody
 $ progBody A ; } V ; F arraySize       		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] F ; V } ; A progBody
 $ progBody A ; } V ; F ] integer [     		[
 $ progBody A ; } V ; F ] integer       		integer
 $ progBody A ; } V ; F ]               		]
 $ progBody A ; } V ; F                 		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] arraySize F ; V } ; A progBody
 $ progBody A ; } V ; F arraySize       		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] F ; V } ; A progBody
 $ progBody A ; } V ; F ] integer [     		[
 $ progBody A ; } V ; F ] integer       		integer
 $ progBody A ; } V ; F ]               		]
 $ progBody A ; } V ; F                 		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] arraySize F ; V } ; A progBody
 $ progBody A ; } V ; F arraySize       		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] F ; V } ; A progBody
 $ progBody A ; } V ; F ] integer [     		[
 $ progBody A ; } V ; F ] integer       		integer
 $ progBody A ; } V ; F ]               		]
 $ progBody A ; } V ; F                 		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] arraySize F ; V } ; A progBody
 $ progBody A ; } V ; F arraySize       		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] F ; V } ; A progBody
 $ progBody A ; } V ; F ] integer [     		[
 $ progBody A ; } V ; F ] integer       		integer
 $ progBody A ; } V ; F ]               		]
 $ progBody A ; } V ; F                 		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] arraySize F ; V } ; A progBody
 $ progBody A ; } V ; F arraySize       		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] F ; V } ; A progBody
 $ progBody A ; } V ; F ] integer [     		[
 $ progBody A ; } V ; F ] integer       		integer
 $ progBody A ; } V ; F ]               		]
 $ progBody A ; } V ; F                 		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; V } ; A progBody
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → T V             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → float        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id K V } ; A progBody
 $ progBody A ; } V K id float          		float
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → S               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id S V } ; A progBody
 $ progBody A ; } V S                   		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id F ; V } ; A progBody
 $ progBody A ; } V ; F                 		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; V } ; A progBody
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → T V             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id K V } ; A progBody
 $ progBody A ; } V K id int            		int
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → M               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id M V } ; A progBody
 $ progBody A ; } V M                   		r10:M → ( fParams ) funcBody ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( fParams ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) fParams (                                      		(
 $ progBody A ; } V ; funcBody ) fParams                                        		r40:fParams → type id F I                   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( type id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id type                                    		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id int                                     		int
 $ progBody A ; } V ; funcBody ) I F id 		id
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I      		r41:I → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody )        		)
 $ progBody A ; } V ; funcBody          		r11:funcBody → { R }    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { R } ; V } ; A progBody
 $ progBody A ; } V ; } R {             		{
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { Q id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id Q        		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id int      		int
 $ progBody A ; } V ; } R S id          		id
 $ progBody A ; } V ; } R S             		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F           		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id P R } ; V } ; A progBody
 $ progBody A ; } V ; } R P id          		id
 $ progBody A ; } V ; } R P             		r15:P → H G assignOp expr ;                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id H G assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp G H                                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id G assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp G                                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp                                       		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr =      		=
 $ progBody A ; } V ; } R ; expr        		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = arithExpr X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X arithExpr 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = term Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y term    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = factor Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z factor                                        		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H id                                      		id
 $ progBody A ; } V ; } R ; X Y Z O G H 		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id indice H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H indice                                  		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ arithExpr ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] arithExpr [                           		[
 $ progBody A ; } V ; } R ; X Y Z O G H ] arithExpr                             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ term Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ factor Z Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y Z factor                            		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer Z Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y Z integer                           		integer
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y                                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ]                                       		]
 $ progBody A ; } V ; } R ; X Y Z O G H 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O     		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X           		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ;		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type ( for                              		for
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type (                                  		(
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type                                    		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id int                                     		int
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id 		id
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp    		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr =           		=
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr             		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = arithExpr X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = term Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = factor Z Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer Z Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y Z integer    		integer
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X                		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ;                  		;
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr                    		r25:relExpr → arithExpr relOp arithExpr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; arithExpr relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp arithExpr  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; term Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y term     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; factor Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z factor 		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id H G O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G H id                                       		id
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G H  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id G O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O      		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp            		r47:relOp → >           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr >                		>
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr                  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > term Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y term                     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > factor Z Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y Z factor                 		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer Z Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y Z integer                		integer
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y Z                        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y                          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ;                            		;
 $ progBody A ; } V ; } R ; statBlock ) assignStat                              		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; variable assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp variable                  		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id H G assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp G H id                    		id
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id G assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp                           		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr =                                  		=
 $ progBody A ; } V ; } R ; statBlock ) expr                                    		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = arithExpr X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X arithExpr                             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = term Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = factor Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z factor                            		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id H G O Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z O G H id                          		id
 $ progBody A ; } V ; } R ; statBlock ) X Y Z O G H                             		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id G O Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z O G                               		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id O Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z O                                 		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y                                     		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id addOp term Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y term addOp                          		r48:addOp → -           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - term Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y term -                              		-
 $ progBody A ; } V ; } R ; statBlock ) X Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - factor Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z factor                            		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z integer                           		integer
 $ progBody A ; } V ; } R ; statBlock ) X Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y                                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X                                       		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) 		)
 $ progBody A ; } V ; } R ; statBlock   		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E {       		{
 $ progBody A ; } V ; } R ; } E         		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { statement E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E statement                                       		r20:statement → if ( expr ) then statBlock else statBlock ;     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( expr ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) expr ( if     		if
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) expr (        		(
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) expr          		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( arithExpr X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X arithExpr   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( term Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y term      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( factor Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z factor  		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H id                                        		id
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id indice H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H indice                                    		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [                             		[
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr                               		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term                                  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor                              		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id H G O Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O G H id                            		id
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O G H                               		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id G O Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O G                                 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id O Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O                                   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z                                     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y                                       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] 		]
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O       		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z         		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y           		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X             		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] relOp arithExpr ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) arithExpr relOp                                       		r47:relOp → >           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > arithExpr ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) arithExpr >   		>
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) arithExpr     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > term Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y term        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > factor Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z factor    		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id H G O Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O G H id  		id
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O G H     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id G O Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O G       		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id O Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O         		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then )               		)
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then                 		then
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock                      		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E {                          		{
 $ progBody A ; } V ; } R ; } E ; statBlock else } E                            		r16:E → assignStat ; E  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { assignStat ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; assignStat               		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { variable assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp variable   		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id H G assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp G H id     		id
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp G H        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id G assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp G          		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp            		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr =                   		=
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr                     		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = arithExpr X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = term Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = factor Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H id           		id
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H              		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id indice H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H indice       		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ arithExpr ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] arithExpr [                                        		[
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] arithExpr  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ term Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y term     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ factor Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z factor 		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id H G O Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O G H id                                       		id
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O G H  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id G O Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O G    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id O Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O      		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ]            		]
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O                  		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X                        		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ;                          		;
 $ progBody A ; } V ; } R ; } E ; statBlock else } E                            		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else }                              		}
 $ progBody A ; } V ; } R ; } E ; statBlock else                                		else
 $ progBody A ; } V ; } R ; } E ; statBlock                                     		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { E } ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; } E { 		{
 $ progBody A ; } V ; } R ; } E ; } E   		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; }     		}
 $ progBody A ; } V ; } R ; } E ;       		;
 $ progBody A ; } V ; } R ; } E         		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; statement E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E statement                                       		r20:statement → put ( expr ) ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( expr ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) expr ( put                                  		put
 $ progBody A ; } V ; } R ; } E ; ) expr (                                      		(
 $ progBody A ; } V ; } R ; } E ; ) expr                                        		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( arithExpr X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X arithExpr                                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( term Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y term                                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( factor Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z factor                                		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id H G O Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O G H id                              		id
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O G H                                 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id G O Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O G                                   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id O Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O                                     		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z                                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X   		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; )     		)
 $ progBody A ; } V ; } R ; } E ;       		;
 $ progBody A ; } V ; } R ; } E         		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; statement E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E statement                                       		r20:statement → put ( expr ) ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( expr ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) expr ( put                                  		put
 $ progBody A ; } V ; } R ; } E ; ) expr (                                      		(
 $ progBody A ; } V ; } R ; } E ; ) expr                                        		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( arithExpr X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X arithExpr                                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( term Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y term                                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( factor Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z factor                                		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id H G O Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O G H id                              		id
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O G H                                 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id G O Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O G                                   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id O Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z O                                     		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id Z Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y Z                                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id Y X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X Y 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id X ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; ) X   		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; )     		)
 $ progBody A ; } V ; } R ; } E ;       		;
 $ progBody A ; } V ; } R ; } E         		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; }           		}
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → return ( expr ) ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( expr ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) expr ( return                                     		return
 $ progBody A ; } V ; } R ; ) expr (    		(
 $ progBody A ; } V ; } R ; ) expr      		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( arithExpr X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X arithExpr                                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( term Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( factor Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z factor                                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id H G O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O G H id                                    		id
 $ progBody A ; } V ; } R ; ) X Y Z O G H                                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id G O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O G 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X         		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; )           		)
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; V } ; A progBody
 $ progBody A ; } V ; }                 		}
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → T V             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id K V } ; A progBody
 $ progBody A ; } V K id int            		int
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → S               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id S V } ; A progBody
 $ progBody A ; } V S                   		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id F ; V } ; A progBody
 $ progBody A ; } V ; F                 		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; V } ; A progBody
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → T V             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id K V } ; A progBody
 $ progBody A ; } V K id int            		int
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → M               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id M V } ; A progBody
 $ progBody A ; } V M                   		r10:M → ( fParams ) funcBody ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( fParams ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) fParams (                                      		(
 $ progBody A ; } V ; funcBody ) fParams                                        		r40:fParams → type id F I                   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( type id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id type                                    		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F id int                                     		int
 $ progBody A ; } V ; funcBody ) I F id 		id
 $ progBody A ; } V ; funcBody ) I F    		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id arraySize F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F arraySize                                  		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] F I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I F ] integer [                                		[
 $ progBody A ; } V ; funcBody ) I F ] integer                                  		integer
 $ progBody A ; } V ; funcBody ) I F ]  		]
 $ progBody A ; } V ; funcBody ) I F    		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] I ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody ) I      		r41:I → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) funcBody ; V } ; A progBody
 $ progBody A ; } V ; funcBody )        		)
 $ progBody A ; } V ; funcBody          		r11:funcBody → { R }    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { R } ; V } ; A progBody
 $ progBody A ; } V ; } R {             		{
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { Q id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id Q        		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id int      		int
 $ progBody A ; } V ; } R S id          		id
 $ progBody A ; } V ; } R S             		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F           		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; Q id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id Q        		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id S R } ; V } ; A progBody
 $ progBody A ; } V ; } R S id int      		int
 $ progBody A ; } V ; } R S id          		id
 $ progBody A ; } V ; } R S             		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id F ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; F           		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id P R } ; V } ; A progBody
 $ progBody A ; } V ; } R P id          		id
 $ progBody A ; } V ; } R P             		r15:P → H G assignOp expr ;                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id H G assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp G H                                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id G assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp G                                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id assignOp expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr assignOp                                       		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = expr ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; expr =      		=
 $ progBody A ; } V ; } R ; expr        		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = arithExpr X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X arithExpr 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = term Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y term    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = factor Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z factor                                        		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H id                                      		id
 $ progBody A ; } V ; } R ; X Y Z O G H 		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id indice H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H indice                                  		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ arithExpr ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] arithExpr [                           		[
 $ progBody A ; } V ; } R ; X Y Z O G H ] arithExpr                             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ term Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ factor Z Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y Z factor                            		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer Z Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y Z integer                           		integer
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer Y ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ] Y                                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] H G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G H ]                                       		]
 $ progBody A ; } V ; } R ; X Y Z O G H 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] G O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O G   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] O Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z O     		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] Z Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y Z       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] Y X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X Y         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] X ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; X           		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ;		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type ( for                              		for
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type (                                  		(
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type                                    		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id int                                     		int
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id 		id
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp    		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr =           		=
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; expr             		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = arithExpr X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = term Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = factor Z Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer Z Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y Z integer    		integer
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer Y X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer X ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ; X                		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; relExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr ;                  		;
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; relExpr                    		r25:relExpr → arithExpr relOp arithExpr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; arithExpr relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp arithExpr  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; term Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y term     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; factor Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z factor 		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id H G O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G H id                                       		id
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G H  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id G O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O      		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id Y relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp Y          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id relOp arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr relOp            		r47:relOp → <=          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= arithExpr ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr <=               		<=
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; arithExpr                  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= term Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y term                     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= factor Z Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y Z factor                 		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer Z Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y Z integer                		integer
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y Z                        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer Y ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ; Y                          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; assignStat ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) assignStat ;                            		;
 $ progBody A ; } V ; } R ; statBlock ) assignStat                              		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; variable assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp variable                  		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id H G assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp G H id                    		id
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id G assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id assignOp expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr assignOp                           		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = expr ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) expr =                                  		=
 $ progBody A ; } V ; } R ; statBlock ) expr                                    		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = arithExpr X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X arithExpr                             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = term Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = factor Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z factor                            		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( arithExpr ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) arithExpr (                     		(
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( term Y ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( factor Z Y ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y Z factor                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id H G O Z Y ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y Z O G H id                    		id
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y Z O G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id G O Z Y ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y Z O G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id O Z Y ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y Z O                           		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id Z Y ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id Y ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z ) Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z )                                 		)
 $ progBody A ; } V ; } R ; statBlock ) X Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y                                     		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) addOp term Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y term addOp                          		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + term Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y term +                              		+
 $ progBody A ; } V ; } R ; statBlock ) X Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + factor Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z factor                            		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer Z Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y Z integer                           		integer
 $ progBody A ; } V ; } R ; statBlock ) X Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer Y X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X Y                                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer X ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) X                                       		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) statBlock ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; statBlock ) 		)
 $ progBody A ; } V ; } R ; statBlock   		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E {       		{
 $ progBody A ; } V ; } R ; } E         		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { statement E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E statement                                       		r20:statement → if ( expr ) then statBlock else statBlock ;     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( expr ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) expr ( if     		if
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) expr (        		(
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) expr          		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( arithExpr X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X arithExpr   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( term Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y term      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( factor Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z factor  		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H id                                        		id
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id indice H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H indice                                    		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [                             		[
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr                               		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term                                  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor                              		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id H G O Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O G H id                            		id
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O G H                               		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id G O Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O G                                 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id O Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z O                                   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z                                     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y                                       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] 		]
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] G O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O G     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] O Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z O       		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] Z Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y Z         		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] Y X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X Y           		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] X ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) X             		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] relOp arithExpr ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) arithExpr relOp                                       		r47:relOp → <           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < arithExpr ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) arithExpr <   		<
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) arithExpr     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < term Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y term        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < factor Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z factor    		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id H G O Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O G H id  		id
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O G H     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id G O Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O G       		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id O Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z O         		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id Z Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y Z           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id Y ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then ) Y             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then statBlock else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then )               		)
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock then                 		then
 $ progBody A ; } V ; } R ; } E ; statBlock else statBlock                      		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E {                          		{
 $ progBody A ; } V ; } R ; } E ; statBlock else } E                            		r16:E → assignStat ; E  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { assignStat ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; assignStat               		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { variable assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp variable   		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id H G assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp G H id     		id
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp G H        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id G assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp G          		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id assignOp expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr assignOp            		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = expr ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr =                   		=
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; expr                     		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = arithExpr X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = term Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = factor Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H id           		id
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H              		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id indice H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H indice       		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ arithExpr ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] arithExpr [                                        		[
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] arithExpr  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ term Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y term     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ factor Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z factor 		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id H G O Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O G H id                                       		id
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O G H  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id G O Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O G    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id O Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z O      		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id Z Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y Z        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id Y ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ] Y          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] H G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H ]            		]
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] G O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] O Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z O                  		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] Z Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] Y X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] X ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ; X                        		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; E } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else } E ;                          		;
 $ progBody A ; } V ; } R ; } E ; statBlock else } E                            		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else statBlock ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; statBlock else }                              		}
 $ progBody A ; } V ; } R ; } E ; statBlock else                                		else
 $ progBody A ; } V ; } R ; } E ; statBlock                                     		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { E } ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; } E { 		{
 $ progBody A ; } V ; } R ; } E ; } E   		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; E } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; } E ; }     		}
 $ progBody A ; } V ; } R ; } E ;       		;
 $ progBody A ; } V ; } R ; } E         		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; }           		}
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; L R } ; V } ; A progBody
 $ progBody A ; } V ; } R L             		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; statement R } ; V } ; A progBody
 $ progBody A ; } V ; } R statement     		r20:statement → return ( expr ) ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( expr ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) expr ( return                                     		return
 $ progBody A ; } V ; } R ; ) expr (    		(
 $ progBody A ; } V ; } R ; ) expr      		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( arithExpr X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X arithExpr                                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( term Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( factor Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z factor                                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id H G O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O G H id                                    		id
 $ progBody A ; } V ; } R ; ) X Y Z O G H                                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id G O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O G 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id O Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z O   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id Z Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id Y X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X Y       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id X ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; ) X         		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; R } ; V } ; A progBody
 $ progBody A ; } V ; } R ; )           		)
 $ progBody A ; } V ; } R ;             		;
 $ progBody A ; } V ; } R               		r12:R → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; V } ; A progBody
 $ progBody A ; } V ; }                 		}
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → T V             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; T V } ; A progBody
 $ progBody A ; } V T                   		r4:T → type id K       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; type id K V } ; A progBody
 $ progBody A ; } V K id type           		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id K V } ; A progBody
 $ progBody A ; } V K id int            		int
 $ progBody A ; } V K id                		id
 $ progBody A ; } V K                   		r5:K → S               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id S V } ; A progBody
 $ progBody A ; } V S                   		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id F ; V } ; A progBody
 $ progBody A ; } V ; F                 		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; V } ; A progBody
 $ progBody A ; } V ;                   		;
 $ progBody A ; } V                     		r3:V → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; A progBody
 $ progBody A ; }                       		}
 $ progBody A ;                         		;
 $ progBody A                           		r1:A → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; progBody
 $ progBody                             		r6:progBody → program funcBody ; C         		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program funcBody ; C
 $ C ; funcBody program                 		program
 $ C ; funcBody                         		r11:funcBody → { R }    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { R } ; C
 $ C ; } R {                            		{
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { L R } ; C
 $ C ; } R L                            		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { statement R } ; C
 $ C ; } R statement                    		r20:statement → if ( expr ) then statBlock else statBlock ;     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( expr ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) expr ( if                          		if
 $ C ; } R ; statBlock else statBlock then ) expr (                             		(
 $ C ; } R ; statBlock else statBlock then ) expr                               		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( arithExpr X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X arithExpr                        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( term Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y term                           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( factor Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z factor                       		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( arithExpr ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) arithExpr (                		(
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) arithExpr                  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( term Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y term                     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( factor Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor                 		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H id               		id
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H                  		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice           		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [    		[
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer    		integer
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]                		]
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H                  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G                    		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] idnest G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G idnest             		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H id .             		.
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H id               		id
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H                  		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice           		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [    		[
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer    		integer
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]                		]
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H                  		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice           		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [    		[
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer    		integer
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]                		]
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G H                  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O G                    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] O Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z O                      		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z                        		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] multOp factor Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor multOp          		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and factor Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor and             		and
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z factor                 		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num Z Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z num                    		num
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y Z                        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num Y ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z ) Y                          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) Z Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y Z )                            		)
 $ C ; } R ; statBlock else statBlock then ) X Y Z                              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) Y X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X Y                                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) X ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) X                                  		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) relOp arithExpr ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) arithExpr relOp                    		r47:relOp → ==          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == arithExpr ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) arithExpr ==                       		==
 $ C ; } R ; statBlock else statBlock then ) arithExpr                          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == term Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y term                             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == factor Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z factor                         		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not factor Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z factor not                     		not
 $ C ; } R ; statBlock else statBlock then ) Y Z factor                         		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not sign factor Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z factor sign                    		r28:sign → -            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - factor Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z factor -                       		-
 $ C ; } R ; statBlock else statBlock then ) Y Z factor                         		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id H G O Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z O G H id                       		id
 $ C ; } R ; statBlock else statBlock then ) Y Z O G H                          		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id G O Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z O G                            		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id O Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z O                              		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( aParams ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) aParams (                    		(
 $ C ; } R ; statBlock else statBlock then ) Y Z ) aParams                      		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( expr J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J expr                       		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( arithExpr X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X arithExpr                		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( term Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y term                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( factor Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor               		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id             		id
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H                		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id indice H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H indice         		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ arithExpr ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr [  		[
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ term Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z factor   		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z integer  		integer
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ]              		]
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G H                		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] G O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O G                  		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] O Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z O                    		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z                      		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] multOp factor Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor multOp        		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and factor Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor and           		and
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z factor               		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num Z Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z num                  		num
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y Z                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num Y X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X Y                        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num X J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J X                          		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num J ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z ) J                            		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) Z Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y Z )                              		)
 $ C ; } R ; statBlock else statBlock then ) Y Z                                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) Y ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then ) Y                                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then statBlock else statBlock ; R } ; C
 $ C ; } R ; statBlock else statBlock then )                                    		)
 $ C ; } R ; statBlock else statBlock then                                      		then
 $ C ; } R ; statBlock else statBlock   		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E {       		{
 $ C ; } R ; statBlock else } E         		r16:E → assignStat ; E  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { assignStat ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; assignStat                                    		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { variable assignOp expr ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; expr assignOp variable                        		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id H G assignOp expr ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; expr assignOp G H id                          		id
 $ C ; } R ; statBlock else } E ; expr assignOp G H                             		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id G assignOp expr ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; expr assignOp G                               		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id assignOp expr ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; expr assignOp                                 		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = expr ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; expr =                                        		=
 $ C ; } R ; statBlock else } E ; expr  		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = arithExpr X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X arithExpr                                   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = term Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y term                                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = factor Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z factor                                  		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H id                                		id
 $ C ; } R ; statBlock else } E ; X Y Z O G H                                   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id indice H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H indice                            		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ arithExpr ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr [                     		[
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ term Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ factor Z Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z factor                      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer Z Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z integer                     		integer
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ]                                 		]
 $ C ; } R ; statBlock else } E ; X Y Z O G H                                   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] indice H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H indice                            		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ arithExpr ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr [                     		[
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ term Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ factor Z Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z factor                      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer Z Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z integer                     		integer
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ]                                 		]
 $ C ; } R ; statBlock else } E ; X Y Z O G H                                   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] indice H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H indice                            		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ arithExpr ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr [                     		[
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ term Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ factor Z Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z factor                      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer Z Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z integer                     		integer
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer Y ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ] Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] H G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G H ]                                 		]
 $ C ; } R ; statBlock else } E ; X Y Z O G H                                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] G O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O G                                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] O Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z O                                       		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y   		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] addOp term Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y term addOp                                		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + term Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y term +                                    		+
 $ C ; } R ; statBlock else } E ; X Y term                                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + factor Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z factor                                  		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not factor Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z factor not                              		not
 $ C ; } R ; statBlock else } E ; X Y Z factor                                  		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( arithExpr ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) arithExpr (                           		(
 $ C ; } R ; statBlock else } E ; X Y Z ) arithExpr                             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( term Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( factor Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z factor                            		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( sign factor Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z factor sign                       		r28:sign → +            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + factor Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z factor +                          		+
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z factor                            		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H id                          		id
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H                             		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id indice H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H indice                      		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ arithExpr ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr [               		[
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ term Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y term                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ factor Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z factor                		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z integer               		integer
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y                         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ]                           		]
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H                             		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] indice H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H indice                      		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ arithExpr ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr [               		[
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ term Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y term                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ factor Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z factor                		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z integer               		integer
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer Y ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ] Y                         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] H G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H ]                           		]
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G H                             		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] G O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O G                               		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] O Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z O                                 		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( aParams ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) aParams (                       		(
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) aParams                         		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( expr J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J expr                          		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( arithExpr X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X arithExpr                   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( term Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y term                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( factor Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z factor                  		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H id                		id
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H                   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id indice H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H indice            		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ arithExpr ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] arithExpr [     		[
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] arithExpr       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ term Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y term          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z factor      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z integer     		integer
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ]                 		]
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H                   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] indice H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H indice            		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ arithExpr ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] arithExpr [     		[
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] arithExpr       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ term Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y term          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ factor Z Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z factor      		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer Z Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z integer     		integer
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y Z             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer Y ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ] Y               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] H G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H ]                 		]
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G H                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] G O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O G                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] O Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z O                       		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] Z Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y Z                         		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] Y X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X Y                           		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] X J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J X                             		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] J ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z ) J                               		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) Z Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z )                                 		)
 $ C ; } R ; statBlock else } E ; X Y Z ) Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) Y ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z ) Y                                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) Z Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y Z )                                       		)
 $ C ; } R ; statBlock else } E ; X Y Z 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) Y X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X Y   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) X ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; X     		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ;       		;
 $ C ; } R ; statBlock else } E         		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; statement E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E statement                                       		r20:statement → for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ;		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id type ( for                        		for
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id type (                            		(
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id type                              		r39:type → id           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id assignOp expr ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id id                                		id
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp id                                   		id
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr assignOp                                      		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = expr ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr =     		=
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; expr       		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = arithExpr X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X arithExpr                                        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = term Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y term   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = factor Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z factor                                       		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not factor Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z factor not                                   		not
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z factor                                       		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H id                                     		id
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H                                        		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id indice H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H indice                                 		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ arithExpr ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] arithExpr [                          		[
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] arithExpr                            		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ term Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y term                               		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ factor Z Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y Z factor                           		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer Z Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y Z integer                          		integer
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y Z                                  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer Y ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ] Y                                    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] H G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H ]                                      		]
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G H                                        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] G O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O G  		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] O Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z O    		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] Z Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y Z      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] Y X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X Y        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] X ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ; X          		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; relExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr ;            		;
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; relExpr              		r25:relExpr → arithExpr relOp arithExpr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; arithExpr relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp arithExpr                                    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; term Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y term                                       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; factor Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z factor                                   		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id H G O Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O G H id                                 		id
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O G H                                    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id G O Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O G                                      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id O Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z O                                        		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( aParams ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) aParams (                              		(
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) aParams                                		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( expr J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J expr                                 		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( arithExpr X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X arithExpr                          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( term Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y term                             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( factor Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z factor                         		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id H G O Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O G H id                       		id
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O G H                          		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id G O Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O G                            		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id O Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z O                              		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id Z Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y Z                                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id Y X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X Y                                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id X J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J X                                    		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id relOp arithExpr J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J arithExpr relOp                      		r47:relOp → <>          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> arithExpr J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J arithExpr <>                         		<>
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J arithExpr                            		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> term Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y term                               		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> factor Z Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y Z factor                           		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer Z Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y Z integer                          		integer
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y Z                                  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer Y J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J Y                                    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer J ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z ) J                                      		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) Z Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z )                                        		)
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y Z  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) Y relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp Y    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) relOp arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr relOp      		r47:relOp → <=          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= arithExpr ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr <=         		<=
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; arithExpr            		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= term Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y term               		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor           		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor not       		not
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor           		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not sign factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor sign      		r28:sign → -            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - factor Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor -         		-
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z factor           		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H id         		id
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H            		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id indice H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H indice     		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ arithExpr ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] arithExpr [                                      		[
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] arithExpr                                        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ term Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y term   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ factor Z Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y Z factor                                       		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer Z Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y Z integer                                      		integer
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y Z      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer Y ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ] Y        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] H G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H ]          		]
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G H            		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] G O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O G              		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] O Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z O                		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] Z Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y Z                  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] Y ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ; Y                    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; assignStat ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat ;                      		;
 $ C ; } R ; statBlock else } E ; statBlock ) assignStat                        		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; variable assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp variable            		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H id              		id
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H                 		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id indice H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H indice          		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ arithExpr ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] arithExpr [   		[
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] arithExpr     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ term Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y term        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ factor Z Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y Z factor    		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer Z Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y Z integer   		integer
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y Z           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer Y ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ] Y             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] H G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H ]               		]
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G H                 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] G assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp G                   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] assignOp expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr assignOp                     		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = expr ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) expr =                            		=
 $ C ; } R ; statBlock else } E ; statBlock ) expr                              		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = arithExpr X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = term Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = factor Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z factor                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H id                    		id
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H                       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id indice H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H indice                		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ arithExpr ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] arithExpr [         		[
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] arithExpr           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ term Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y term              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ factor Z Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y Z factor          		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer Z Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y Z integer         		integer
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y Z                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer Y ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ] Y                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H ]                     		]
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G                         		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] idnest G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G idnest                  		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id H G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H id .                  		.
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H id                    		id
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id G O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id O Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z O                           		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( aParams ) Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z ) aParams (                 		(
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z ) aParams                   		r42:aParams → ε         		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) Z Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z )                           		)
 $ C ; } R ; statBlock else } E ; statBlock ) X Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) Y X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) X ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock ) X                                 		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) statBlock ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; statBlock )                                   		)
 $ C ; } R ; statBlock else } E ; statBlock                                     		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E { 		{
 $ C ; } R ; statBlock else } E ; } E   		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { statement E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E statement                                 		r20:statement → if ( expr ) then statBlock else statBlock ;     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( expr ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) expr ( if                                       		if
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) expr (  		(
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) expr    		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( arithExpr X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X arithExpr                                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( term Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term                                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor                                    		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( arithExpr ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) arithExpr (                             		(
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) arithExpr                               		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( term Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y term                                  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor                              		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id                            		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                               		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice                        		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [                 		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr                   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor                  		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer                 		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z                         		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y                           		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]                             		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                               		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G                                 		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] idnest G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G idnest                          		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id .                          		.
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id                            		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                               		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice                        		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [                 		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr                   		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term                      		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor                  		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer                 		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z                         		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y                           		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]                             		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H                               		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G                                 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O                                   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z                                     		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] multOp factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor multOp                       		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor and                          		and
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor                              		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num Z Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z num                                 		num
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y Z                                     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num Y ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) Y                                       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z ) 		)
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y     		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) addOp term Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term addOp                                  		r48:addOp → or          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or term Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term or                                     		or
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y term                                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor                                    		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H id                                  		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                                     		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id indice H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H indice                              		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [                       		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr                         		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term                            		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor                        		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer                       		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z                               		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y                                 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ]                                   		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                                     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G                                       		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] idnest G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G idnest                                		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H id .                                		.
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H id                                  		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                                     		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id indice H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H indice                              		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [                       		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr                         		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term                            		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor                        		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer                       		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z                               		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y                                 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] H G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H ]                                   		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G H                                     		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] G O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O G                                       		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] O Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z O 		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z   		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] multOp factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor multOp                             		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and factor Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor and                                		and
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z factor                                    		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Z Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z num                                       		num
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y Z   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Y X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X Y     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num X ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) X       		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num relOp arithExpr ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) arithExpr relOp                                 		r47:relOp → ==          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == arithExpr ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) arithExpr ==                                    		==
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) arithExpr                                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == term Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id                                    		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                                       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id indice H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H indice                                		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr [                         		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr                           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ term Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y term                              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z factor                          		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z integer                         		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z                                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y                                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ]                                     		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O   		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y       		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] addOp term Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term addOp                                    		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + term Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term +                                        		+
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y term  		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                                      		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor not                                  		not
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                                      		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( arithExpr ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) arithExpr (                               		(
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) arithExpr                                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( term Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y term                                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor                                		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( sign factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor sign                           		r28:sign → +            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor +                              		+
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor                                		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H id                              		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H                                 		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id indice H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H indice                          		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ arithExpr ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] arithExpr [                   		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] arithExpr                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ term Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y term                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ factor Z Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z factor                    		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer Z Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z integer                   		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z                           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y                             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ]                               		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H                                 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G                                   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] O Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z O                                     		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( aParams ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) aParams (                           		(
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) aParams                             		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( expr J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J expr                              		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( arithExpr X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( term Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( factor Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z factor                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H id                    		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H                       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id indice H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H indice                		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ arithExpr ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr [         		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ term Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y term              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z factor          		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z integer         		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ]                     		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O                           		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X                                 		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J                                   		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z )                                     		)
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y Z                                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Y ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) Y 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z )   		)
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z     		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) multOp factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor multOp                               		r49:multOp → /          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor /                                    		/
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                                      		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor not                                  		not
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                                      		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not sign factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor sign                                 		r28:sign → -            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - factor Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor -                                    		-
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z factor                                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id                                    		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                                       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id indice H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H indice                                		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr [                         		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr                           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ term Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y term                              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z factor                          		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z integer                         		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z                                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ] Y                                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H ]                                     		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G 		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] idnest G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G idnest                                  		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id H G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id .                                  		.
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H id                                    		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G H                                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id G O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O G 		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id O Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z O   		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( aParams ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) aParams (                                 		(
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) aParams                                   		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( expr J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J expr                                    		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( arithExpr X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X arithExpr                             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( term Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor                            		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id                          		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H                             		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id indice H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H indice                      		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ arithExpr ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr [               		[
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ term Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y term                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z factor                		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z integer               		integer
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y                         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ]                           		]
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H                             		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G                               		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] idnest G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G idnest                        		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id .                        		.
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id                          		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H                             		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G                               		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O                                 		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z                                   		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id multOp factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor multOp                     		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor and                        		and
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor                            		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z num                               		num
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num Y X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X Y                                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num X J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J X                                       		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num J ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z ) J 		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) Z Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z )   		)
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y Z     		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) Y ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then ) Y       		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then statBlock else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then )         		)
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock then           		then
 $ C ; } R ; statBlock else } E ; } E ; statBlock else statBlock                		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E {                    		{
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E                      		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { statement E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E statement            		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( variable ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) variable ( get   		get
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) variable (       		(
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) variable         		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id H G ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) G H id           		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id G ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; )                  		)
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ;                    		;
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E                      		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; statement E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E statement            		r20:statement → put ( expr ) ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( expr ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) expr ( put       		put
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) expr (           		(
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) expr             		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( arithExpr X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( term Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( factor Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z factor     		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id H G O Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O G H id   		id
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O G H      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id G O Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O G        		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id O Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z O          		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id Z Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id Y X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id X ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; ) X                		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; E } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ; )                  		)
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E ;                    		;
 $ C ; } R ; statBlock else } E ; } E ; statBlock else } E                      		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else statBlock ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; statBlock else }                        		}
 $ C ; } R ; statBlock else } E ; } E ; statBlock else                          		else
 $ C ; } R ; statBlock else } E ; } E ; statBlock                               		r22:statBlock → ε       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; E } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; } E ; 		;
 $ C ; } R ; statBlock else } E ; } E   		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; E } else statBlock ; R } ; C
 $ C ; } R ; statBlock else } E ; }     		}
 $ C ; } R ; statBlock else } E ;       		;
 $ C ; } R ; statBlock else } E         		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else statBlock ; R } ; C
 $ C ; } R ; statBlock else }           		}
 $ C ; } R ; statBlock else             		else
 $ C ; } R ; statBlock                  		r22:statBlock → statement                   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else statement ; R } ; C
 $ C ; } R ; statement                  		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( variable ) ; ; R } ; C
 $ C ; } R ; ; ) variable ( get         		get
 $ C ; } R ; ; ) variable (             		(
 $ C ; } R ; ; ) variable               		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id H G ) ; ; R } ; C
 $ C ; } R ; ; ) G H id                 		id
 $ C ; } R ; ; ) G H                    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id G ) ; ; R } ; C
 $ C ; } R ; ; ) G                      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; R } ; C
 $ C ; } R ; ; )                        		)
 $ C ; } R ; ;                          		;
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; L R } ; C
 $ C ; } R L                            		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; statement R } ; C
 $ C ; } R statement                    		r20:statement → return ( expr ) ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( expr ) ; R } ; C
 $ C ; } R ; ) expr ( return            		return
 $ C ; } R ; ) expr (                   		(
 $ C ; } R ; ) expr                     		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( arithExpr X ) ; R } ; C
 $ C ; } R ; ) X arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( term Y X ) ; R } ; C
 $ C ; } R ; ) X Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( factor Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id H G O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O G H id           		id
 $ C ; } R ; ) X Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id G O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O                  		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id Y X ) ; R } ; C
 $ C ; } R ; ) X Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id X ) ; R } ; C
 $ C ; } R ; ) X                        		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; R } ; C
 $ C ; } R ; )                          		)
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; L R } ; C
 $ C ; } R L                            		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; statement R } ; C
 $ C ; } R statement                    		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( variable ) ; R } ; C
 $ C ; } R ; ) variable ( get           		get
 $ C ; } R ; ) variable (               		(
 $ C ; } R ; ) variable                 		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id H G ) ; R } ; C
 $ C ; } R ; ) G H id                   		id
 $ C ; } R ; ) G H                      		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id indice H G ) ; R } ; C
 $ C ; } R ; ) G H indice               		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ arithExpr ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] arithExpr [        		[
 $ C ; } R ; ) G H ] arithExpr          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ term Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ factor Z Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y Z factor         		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer Z Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y Z integer        		integer
 $ C ; } R ; ) G H ] Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] H G ) ; R } ; C
 $ C ; } R ; ) G H ]                    		]
 $ C ; } R ; ) G H                      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] G ) ; R } ; C
 $ C ; } R ; ) G                        		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] idnest G ) ; R } ; C
 $ C ; } R ; ) G idnest                 		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id H G ) ; R } ; C
 $ C ; } R ; ) G H id .                 		.
 $ C ; } R ; ) G H id                   		id
 $ C ; } R ; ) G H                      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id G ) ; R } ; C
 $ C ; } R ; ) G                        		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id idnest G ) ; R } ; C
 $ C ; } R ; ) G idnest                 		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id H G ) ; R } ; C
 $ C ; } R ; ) G H id .                 		.
 $ C ; } R ; ) G H id                   		id
 $ C ; } R ; ) G H                      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id G ) ; R } ; C
 $ C ; } R ; ) G                        		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id idnest G ) ; R } ; C
 $ C ; } R ; ) G idnest                 		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id H G ) ; R } ; C
 $ C ; } R ; ) G H id .                 		.
 $ C ; } R ; ) G H id                   		id
 $ C ; } R ; ) G H                      		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id indice H G ) ; R } ; C
 $ C ; } R ; ) G H indice               		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ arithExpr ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] arithExpr [        		[
 $ C ; } R ; ) G H ] arithExpr          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ term Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ factor Z Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y Z factor         		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer Z Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y Z integer        		integer
 $ C ; } R ; ) G H ] Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer Y ] H G ) ; R } ; C
 $ C ; } R ; ) G H ] Y                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] H G ) ; R } ; C
 $ C ; } R ; ) G H ]                    		]
 $ C ; } R ; ) G H                      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] G ) ; R } ; C
 $ C ; } R ; ) G                        		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; R } ; C
 $ C ; } R ; )                          		)
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; L R } ; C
 $ C ; } R L                            		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; statement R } ; C
 $ C ; } R statement                    		r20:statement → put ( expr ) ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( expr ) ; R } ; C
 $ C ; } R ; ) expr ( put               		put
 $ C ; } R ; ) expr (                   		(
 $ C ; } R ; ) expr                     		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( arithExpr X ) ; R } ; C
 $ C ; } R ; ) X arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( term Y X ) ; R } ; C
 $ C ; } R ; ) X Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( factor Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z factor             		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not factor Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z factor not         		not
 $ C ; } R ; ) X Y Z factor             		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( arithExpr ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) arithExpr (      		(
 $ C ; } R ; ) X Y Z ) arithExpr        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( term Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y term           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( factor Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z factor       		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H id     		id
 $ C ; } R ; ) X Y Z ) Y Z O G H        		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id indice H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H indice 		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ arithExpr ] H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H ] arithExpr [                                  		[
 $ C ; } R ; ) X Y Z ) Y Z O G H ] arithExpr                                    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ term Y ] H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H ] Y term                                       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ factor Z Y ] H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H ] Y Z factor                                   		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer Z Y ] H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H ] Y Z integer                                  		integer
 $ C ; } R ; ) X Y Z ) Y Z O G H ] Y Z  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer Y ] H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H ] Y    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] H G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G H ]      		]
 $ C ; } R ; ) X Y Z ) Y Z O G H        		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] G O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O G          		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] O Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z O            		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z              		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] multOp factor Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z factor multOp                                        		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and factor Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z factor and   		and
 $ C ; } R ; ) X Y Z ) Y Z factor       		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num Z Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y Z num          		num
 $ C ; } R ; ) X Y Z ) Y Z              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num Y ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z ) Y                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z )                  		)
 $ C ; } R ; ) X Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) Y X ) ; R } ; C
 $ C ; } R ; ) X Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) X ) ; R } ; C
 $ C ; } R ; ) X                        		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; R } ; C
 $ C ; } R ; )                          		)
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; L R } ; C
 $ C ; } R L                            		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; Q id S R } ; C
 $ C ; } R S id Q                       		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id S R } ; C
 $ C ; } R S id int                     		int
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id F ; R } ; C
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; L R } ; C
 $ C ; } R L                            		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; Q id S R } ; C
 $ C ; } R S id Q                       		r14:Q → float           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id S R } ; C
 $ C ; } R S id float                   		float
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id F ; R } ; C
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; L R } ; C
 $ C ; } R L                            		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id P R } ; C
 $ C ; } R P id                         		id
 $ C ; } R P                            		r15:P → id S            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id S R } ; C
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id F ; R } ; C
 $ C ; } R ; F                          		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id arraySize F ; R } ; C
 $ C ; } R ; F arraySize                		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] F ; R } ; C
 $ C ; } R ; F ] integer [              		[
 $ C ; } R ; F ] integer                		integer
 $ C ; } R ; F ]                        		]
 $ C ; } R ; F                          		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] arraySize F ; R } ; C
 $ C ; } R ; F arraySize                		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] F ; R } ; C
 $ C ; } R ; F ] integer [              		[
 $ C ; } R ; F ] integer                		integer
 $ C ; } R ; F ]                        		]
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; C
 $ C ; }                                		}
 $ C ;                                  		;
 $ C                                    		r7:C → funcDef C       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; funcDef C
 $ C funcDef                            		r9:funcDef → funcHead funcBody ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; funcHead funcBody ; C
 $ C ; funcBody funcHead                		r8:funcHead → type id ( fParams )          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; type id ( fParams ) funcBody ; C
 $ C ; funcBody ) fParams ( id type     		r39:type → float        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( fParams ) funcBody ; C
 $ C ; funcBody ) fParams ( id float    		float
 $ C ; funcBody ) fParams ( id          		id
 $ C ; funcBody ) fParams (             		(
 $ C ; funcBody ) fParams               		r40:fParams → ε         		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) funcBody ; C
 $ C ; funcBody )                       		)
 $ C ; funcBody                         		r11:funcBody → { R }    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { R } ; C
 $ C ; } R {                            		{
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { L R } ; C
 $ C ; } R L                            		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { Q id S R } ; C
 $ C ; } R S id Q                       		r14:Q → float           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id S R } ; C
 $ C ; } R S id float                   		float
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id F ; R } ; C
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; L R } ; C
 $ C ; } R L                            		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id P R } ; C
 $ C ; } R P id                         		id
 $ C ; } R P                            		r15:P → H G assignOp expr ;                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id H G assignOp expr ; R } ; C
 $ C ; } R ; expr assignOp G H          		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id G assignOp expr ; R } ; C
 $ C ; } R ; expr assignOp G            		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id assignOp expr ; R } ; C
 $ C ; } R ; expr assignOp              		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = expr ; R } ; C
 $ C ; } R ; expr =                     		=
 $ C ; } R ; expr                       		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = arithExpr X ; R } ; C
 $ C ; } R ; X arithExpr                		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = term Y X ; R } ; C
 $ C ; } R ; X Y term                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = factor Z Y X ; R } ; C
 $ C ; } R ; X Y Z factor               		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer Z Y X ; R } ; C
 $ C ; } R ; X Y Z integer              		integer
 $ C ; } R ; X Y Z                      		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer multOp factor Z Y X ; R } ; C
 $ C ; } R ; X Y Z factor multOp        		r49:multOp → *          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * factor Z Y X ; R } ; C
 $ C ; } R ; X Y Z factor *             		*
 $ C ; } R ; X Y Z factor               		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( arithExpr ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) arithExpr (        		(
 $ C ; } R ; X Y Z ) arithExpr          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( term Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( factor Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z factor         		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z integer        		integer
 $ C ; } R ; X Y Z ) Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y                  		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer addOp term Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y term addOp       		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + term Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y term +           		+
 $ C ; } R ; X Y Z ) Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + factor Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z factor         		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z num            		num
 $ C ; } R ; X Y Z ) Y Z                		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num multOp factor Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z factor multOp  		r49:multOp → /          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / factor Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z factor /       		/
 $ C ; } R ; X Y Z ) Y Z factor         		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z num            		num
 $ C ; } R ; X Y Z ) Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z )                    		)
 $ C ; } R ; X Y Z                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) Y X ; R } ; C
 $ C ; } R ; X Y                        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) X ; R } ; C
 $ C ; } R ; X                          		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; L R } ; C
 $ C ; } R L                            		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id P R } ; C
 $ C ; } R P id                         		id
 $ C ; } R P                            		r15:P → H G assignOp expr ;                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id H G assignOp expr ; R } ; C
 $ C ; } R ; expr assignOp G H          		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id G assignOp expr ; R } ; C
 $ C ; } R ; expr assignOp G            		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id assignOp expr ; R } ; C
 $ C ; } R ; expr assignOp              		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = expr ; R } ; C
 $ C ; } R ; expr =                     		=
 $ C ; } R ; expr                       		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = arithExpr X ; R } ; C
 $ C ; } R ; X arithExpr                		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = term Y X ; R } ; C
 $ C ; } R ; X Y term                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = factor Z Y X ; R } ; C
 $ C ; } R ; X Y Z factor               		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num Z Y X ; R } ; C
 $ C ; } R ; X Y Z num                  		num
 $ C ; } R ; X Y Z                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num Y X ; R } ; C
 $ C ; } R ; X Y                        		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num addOp term Y X ; R } ; C
 $ C ; } R ; X Y term addOp             		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + term Y X ; R } ; C
 $ C ; } R ; X Y term +                 		+
 $ C ; } R ; X Y term                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + factor Z Y X ; R } ; C
 $ C ; } R ; X Y Z factor               		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( arithExpr ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) arithExpr (        		(
 $ C ; } R ; X Y Z ) arithExpr          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( term Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( factor Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z factor         		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( arithExpr ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) arithExpr (  		(
 $ C ; } R ; X Y Z ) Y Z ) arithExpr    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( term Y ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( factor Z Y ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) Y Z factor   		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num Z Y ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) Y Z num      		num
 $ C ; } R ; X Y Z ) Y Z ) Y Z          		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num multOp factor Z Y ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) Y Z factor multOp                                    		r49:multOp → *          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * factor Z Y ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) Y Z factor * 		*
 $ C ; } R ; X Y Z ) Y Z ) Y Z factor   		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num Z Y ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) Y Z num      		num
 $ C ; } R ; X Y Z ) Y Z ) Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num Y ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z ) Y            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z )              		)
 $ C ; } R ; X Y Z ) Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y                  		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) addOp term Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y term addOp       		r48:addOp → -           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - term Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y term -           		-
 $ C ; } R ; X Y Z ) Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - factor Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z factor         		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num Z Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y Z num            		num
 $ C ; } R ; X Y Z ) Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num Y ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z ) Y                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) Z Y X ; R } ; C
 $ C ; } R ; X Y Z )                    		)
 $ C ; } R ; X Y Z                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) Y X ; R } ; C
 $ C ; } R ; X Y                        		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) addOp term Y X ; R } ; C
 $ C ; } R ; X Y term addOp             		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + term Y X ; R } ; C
 $ C ; } R ; X Y term +                 		+
 $ C ; } R ; X Y term                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + factor Z Y X ; R } ; C
 $ C ; } R ; X Y Z factor               		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num Z Y X ; R } ; C
 $ C ; } R ; X Y Z num                  		num
 $ C ; } R ; X Y Z                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num Y X ; R } ; C
 $ C ; } R ; X Y                        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num X ; R } ; C
 $ C ; } R ; X                          		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; L R } ; C
 $ C ; } R L                            		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; statement R } ; C
 $ C ; } R statement                    		r20:statement → return ( expr ) ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( expr ) ; R } ; C
 $ C ; } R ; ) expr ( return            		return
 $ C ; } R ; ) expr (                   		(
 $ C ; } R ; ) expr                     		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( arithExpr X ) ; R } ; C
 $ C ; } R ; ) X arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( term Y X ) ; R } ; C
 $ C ; } R ; ) X Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( factor Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id H G O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O G H id           		id
 $ C ; } R ; ) X Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id G O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O                  		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id Y X ) ; R } ; C
 $ C ; } R ; ) X Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id X ) ; R } ; C
 $ C ; } R ; ) X                        		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; R } ; C
 $ C ; } R ; )                          		)
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; C
 $ C ; }                                		}
 $ C ;                                  		;
 $ C                                    		r7:C → funcDef C       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; funcDef C
 $ C funcDef                            		r9:funcDef → funcHead funcBody ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; funcHead funcBody ; C
 $ C ; funcBody funcHead                		r8:funcHead → type id ( fParams )          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; type id ( fParams ) funcBody ; C
 $ C ; funcBody ) fParams ( id type     		r39:type → id           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( fParams ) funcBody ; C
 $ C ; funcBody ) fParams ( id id       		id
 $ C ; funcBody ) fParams ( id          		id
 $ C ; funcBody ) fParams (             		(
 $ C ; funcBody ) fParams               		r40:fParams → ε         		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) funcBody ; C
 $ C ; funcBody )                       		)
 $ C ; funcBody                         		r11:funcBody → { R }    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { R } ; C
 $ C ; } R {                            		{
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { L R } ; C
 $ C ; } R L                            		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { Q id S R } ; C
 $ C ; } R S id Q                       		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id S R } ; C
 $ C ; } R S id int                     		int
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id F ; R } ; C
 $ C ; } R ; F                          		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id arraySize F ; R } ; C
 $ C ; } R ; F arraySize                		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] F ; R } ; C
 $ C ; } R ; F ] integer [              		[
 $ C ; } R ; F ] integer                		integer
 $ C ; } R ; F ]                        		]
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; L R } ; C
 $ C ; } R L                            		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; Q id S R } ; C
 $ C ; } R S id Q                       		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id S R } ; C
 $ C ; } R S id int                     		int
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id F ; R } ; C
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; L R } ; C
 $ C ; } R L                            		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; Q id S R } ; C
 $ C ; } R S id Q                       		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id S R } ; C
 $ C ; } R S id int                     		int
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id F ; R } ; C
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; L R } ; C
 $ C ; } R L                            		r13:L → Q id S          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; Q id S R } ; C
 $ C ; } R S id Q                       		r14:Q → int             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id S R } ; C
 $ C ; } R S id int                     		int
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id F ; R } ; C
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; L R } ; C
 $ C ; } R L                            		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id P R } ; C
 $ C ; } R P id                         		id
 $ C ; } R P                            		r15:P → id S            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id S R } ; C
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id F ; R } ; C
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; L R } ; C
 $ C ; } R L                            		r13:L → id P            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id P R } ; C
 $ C ; } R P id                         		id
 $ C ; } R P                            		r15:P → id S            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id S R } ; C
 $ C ; } R S id                         		id
 $ C ; } R S                            		r18:S → F ;             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id F ; R } ; C
 $ C ; } R ; F                          		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id arraySize F ; R } ; C
 $ C ; } R ; F arraySize                		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] F ; R } ; C
 $ C ; } R ; F ] integer [              		[
 $ C ; } R ; F ] integer                		integer
 $ C ; } R ; F ]                        		]
 $ C ; } R ; F                          		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] arraySize F ; R } ; C
 $ C ; } R ; F arraySize                		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] F ; R } ; C
 $ C ; } R ; F ] integer [              		[
 $ C ; } R ; F ] integer                		integer
 $ C ; } R ; F ]                        		]
 $ C ; } R ; F                          		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] arraySize F ; R } ; C
 $ C ; } R ; F arraySize                		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] F ; R } ; C
 $ C ; } R ; F ] integer [              		[
 $ C ; } R ; F ] integer                		integer
 $ C ; } R ; F ]                        		]
 $ C ; } R ; F                          		r19:F → arraySize F     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] arraySize F ; R } ; C
 $ C ; } R ; F arraySize                		r38:arraySize → [ integer ]                 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] F ; R } ; C
 $ C ; } R ; F ] integer [              		[
 $ C ; } R ; F ] integer                		integer
 $ C ; } R ; F ]                        		]
 $ C ; } R ; F                          		r19:F → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; R } ; C
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; L R } ; C
 $ C ; } R L                            		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; statement R } ; C
 $ C ; } R statement                    		r20:statement → for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ;		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type ( for     		for
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type (         		(
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id type           		r39:type → int          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id assignOp expr ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id int            		int
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp id                		id
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr assignOp                   		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = expr ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr =                          		=
 $ C ; } R ; statBlock ) assignStat ; relExpr ; expr                            		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = arithExpr X ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; X arithExpr                     		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = term Y X ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; X Y term                        		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = factor Z Y X ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; X Y Z factor                    		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer Z Y X ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; X Y Z integer                   		integer
 $ C ; } R ; statBlock ) assignStat ; relExpr ; X Y Z                           		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer Y X ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; X Y                             		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer X ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ; X                               		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; relExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; relExpr ;                                 		;
 $ C ; } R ; statBlock ) assignStat ; relExpr                                   		r25:relExpr → arithExpr relOp arithExpr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; arithExpr relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp arithExpr                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; term Y relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y term                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; factor Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z factor                		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id H G O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G H id              		id
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G H                 		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id G O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O G                   		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id O Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z O                     		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id Z Y relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y Z                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id Y relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp Y                         		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id relOp arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr relOp                           		r47:relOp → <=          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= arithExpr ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; arithExpr <=                              		<=
 $ C ; } R ; statBlock ) assignStat ; arithExpr                                 		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= term Y ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; Y term                                    		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= factor Z Y ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; Y Z factor                                		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer Z Y ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; Y Z integer                               		integer
 $ C ; } R ; statBlock ) assignStat ; Y Z                                       		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer Y ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ; Y 		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; assignStat ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) assignStat ;   		;
 $ C ; } R ; statBlock ) assignStat     		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; variable assignOp expr ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) expr assignOp variable                                 		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id H G assignOp expr ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) expr assignOp G H id                                   		id
 $ C ; } R ; statBlock ) expr assignOp G H                                      		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id G assignOp expr ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) expr assignOp G                                        		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id assignOp expr ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) expr assignOp  		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = expr ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) expr =         		=
 $ C ; } R ; statBlock ) expr           		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = arithExpr X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X arithExpr    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = term Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = factor Z Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y Z factor   		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id H G O Z Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y Z O G H id 		id
 $ C ; } R ; statBlock ) X Y Z O G H    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id G O Z Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y Z O G      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id O Z Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y Z O        		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id Z Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y            		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id addOp term Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y term addOp 		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + term Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y term +     		+
 $ C ; } R ; statBlock ) X Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + factor Z Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y Z factor   		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer Z Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y Z integer  		integer
 $ C ; } R ; statBlock ) X Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer Y X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X Y            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer X ) statBlock ; R } ; C
 $ C ; } R ; statBlock ) X              		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) statBlock ; R } ; C
 $ C ; } R ; statBlock )                		)
 $ C ; } R ; statBlock                  		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { E } ; R } ; C
 $ C ; } R ; } E {                      		{
 $ C ; } R ; } E                        		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { statement E } ; R } ; C
 $ C ; } R ; } E statement              		r20:statement → if ( expr ) then statBlock else statBlock ;     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( expr ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) expr ( if                    		if
 $ C ; } R ; } E ; statBlock else statBlock then ) expr (                       		(
 $ C ; } R ; } E ; statBlock else statBlock then ) expr                         		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( arithExpr X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X arithExpr                  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( term Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y term                     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( factor Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z factor                 		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( arithExpr ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) arithExpr (          		(
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) arithExpr            		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( term Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y term               		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor           		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id         		id
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H            		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice     		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [                                      		[
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr                                        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor                                       		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer                                      		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]          		]
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H            		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G              		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] idnest G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G idnest       		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id .       		.
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H id         		id
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H            		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id indice H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H indice     		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ arithExpr ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr [                                      		[
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] arithExpr                                        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ term Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y term   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ factor Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z factor                                       		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer Z Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z integer                                      		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y Z      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer Y ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ] Y        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] H G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H ]          		]
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G H            		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] G O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O G              		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] O Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z O                		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z                  		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] multOp factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor multOp    		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and factor Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor and       		and
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z factor           		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num Z Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z num              		num
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y Z                  		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num Y ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z ) Y                    		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z )                      		)
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z                        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y                          		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) addOp term Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y term addOp               		r48:addOp → or          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or term Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y term or                  		or
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y term                     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or factor Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z factor                 		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H id               		id
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H                  		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id indice H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H indice           		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [    		[
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer    		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ]                		]
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H                  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G                    		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] idnest G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G idnest             		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H id .             		.
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H id               		id
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H                  		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id indice H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H indice           		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ arithExpr ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr [    		[
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] arithExpr      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ term Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y term         		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ factor Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z factor     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Z Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z integer    		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y Z            		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer Y ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ] Y              		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] H G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H ]                		]
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G H                  		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] G O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O G                    		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] O Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z O                      		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z                        		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] multOp factor Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z factor multOp          		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and factor Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z factor and             		and
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z factor                 		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Z Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z num                    		num
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y Z                        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num Y X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X Y                          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num X ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) X                            		r24:X → relOp arithExpr 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num relOp arithExpr ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) arithExpr relOp              		r47:relOp → ==          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == arithExpr ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) arithExpr ==                 		==
 $ C ; } R ; } E ; statBlock else statBlock then ) arithExpr                    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == term Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y term                       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor                   		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H id                 		id
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H                    		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id indice H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H indice             		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr [      		[
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ term Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y term           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z factor       		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z integer      		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ]                  		]
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H                    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G                      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O                        		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z                          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y                            		r27:Y → addOp term Y    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] addOp term Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y term addOp                 		r48:addOp → +           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + term Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y term +                     		+
 $ C ; } R ; } E ; statBlock else statBlock then ) Y term                       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor                   		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor not               		not
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor                   		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( arithExpr ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) arithExpr (            		(
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( term Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor             		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( sign factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor sign        		r28:sign → +            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + factor Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor +           		+
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H id           		id
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H              		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id indice H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H indice       		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ arithExpr ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] arithExpr [                                        		[
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] arithExpr  		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ term Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y term     		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ factor Z Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z factor 		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer Z Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z integer                                        		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y Z        		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer Y ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ] Y          		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] H G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H ]            		]
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] G O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] O Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z O                  		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( aParams ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) aParams (        		(
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) aParams          		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( expr J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J expr           		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( arithExpr X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X arithExpr    		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( term Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y term       		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( factor Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z factor   		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H id 		id
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H    		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id indice H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H indice                                     		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ arithExpr ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr [                              		[
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] arithExpr                                		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ term Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y term                                   		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z factor                               		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z integer                              		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y Z                                      		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer Y ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ] Y                                        		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] H G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H ]  		]
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G H    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] G O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O G      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] O Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z O        		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] Z Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y Z          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] Y X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X Y            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] X J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J X              		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] J ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z ) J                		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Z Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z )                  		)
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) Y ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z )                        		)
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z                          		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) multOp factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor multOp            		r49:multOp → /          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor /                 		/
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor                   		r31:factor → not factor 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor not               		not
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor                   		r31:factor → sign factor                    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not sign factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor sign              		r28:sign → -            		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - factor Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor -                 		-
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z factor                   		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H id                 		id
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H                    		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id indice H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H indice             		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ arithExpr ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr [      		[
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] arithExpr        		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ term Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y term           		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ factor Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z factor       		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer Z Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z integer      		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y Z              		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer Y ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ] Y                		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H ]                  		]
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H                    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G                      		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] idnest G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G idnest               		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id H G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H id .               		.
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H id                 		id
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G H                    		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id G O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O G                      		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id O Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z O                        		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( aParams ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) aParams (              		(
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) aParams                		r42:aParams → expr J    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( expr J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J expr                 		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( arithExpr X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X arithExpr          		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( term Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y term             		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor         		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id       		id
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H          		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id indice H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H indice   		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ arithExpr ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr [                                    		[
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] arithExpr                                      		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ term Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y term 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ factor Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z factor                                     		r31:factor → integer    		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer Z Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z integer                                    		integer
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y Z    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer Y ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ] Y      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H ]        		]
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H          		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G            		r34:G → idnest G        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] idnest G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G idnest     		r36:idnest → . id H     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id H G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id .     		.
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H id       		id
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G H          		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id G O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O G            		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id O Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z O              		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z                		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id multOp factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor multOp  		r49:multOp → and        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and factor Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor and     		and
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z factor         		r31:factor → num        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num Z Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z num            		num
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y Z                		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num Y X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X Y                  		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num X J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J X                    		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num J ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z ) J                      		r43:J → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) Z Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z )                        		)
 $ C ; } R ; } E ; statBlock else statBlock then ) Y Z                          		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) Y ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then ) Y                            		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then statBlock else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else statBlock then )                              		)
 $ C ; } R ; } E ; statBlock else statBlock then                                		then
 $ C ; } R ; } E ; statBlock else statBlock                                     		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E { 		{
 $ C ; } R ; } E ; statBlock else } E   		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { statement E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E statement                                 		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( variable ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) variable ( get                        		get
 $ C ; } R ; } E ; statBlock else } E ; ) variable (                            		(
 $ C ; } R ; } E ; statBlock else } E ; ) variable                              		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H id                                		id
 $ C ; } R ; } E ; statBlock else } E ; ) G H                                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G                                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; )                                       		)
 $ C ; } R ; } E ; statBlock else } E ; 		;
 $ C ; } R ; } E ; statBlock else } E   		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; statement E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E statement                                 		r20:statement → put ( expr ) ;              		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( expr ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) expr ( put                            		put
 $ C ; } R ; } E ; statBlock else } E ; ) expr (                                		(
 $ C ; } R ; } E ; statBlock else } E ; ) expr                                  		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( arithExpr X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X arithExpr                           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( term Y X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X Y term                              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( factor Z Y X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X Y Z factor                          		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id H G O Z Y X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X Y Z O G H id                        		id
 $ C ; } R ; } E ; statBlock else } E ; ) X Y Z O G H                           		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id G O Z Y X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X Y Z O G                             		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id O Z Y X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X Y Z O                               		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id Z Y X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X Y Z                                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id Y X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X Y                                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id X ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) X                                     		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; )                                       		)
 $ C ; } R ; } E ; statBlock else } E ; 		;
 $ C ; } R ; } E ; statBlock else } E   		r16:E → statement E     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; statement E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E statement                                 		r20:statement → get ( variable ) ;          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( variable ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) variable ( get                        		get
 $ C ; } R ; } E ; statBlock else } E ; ) variable (                            		(
 $ C ; } R ; } E ; statBlock else } E ; ) variable                              		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H id                                		id
 $ C ; } R ; } E ; statBlock else } E ; ) G H                                   		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id indice H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H indice                            		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ arithExpr ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] arithExpr [                     		[
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ term Y ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ factor Z Y ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y Z factor                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id H G O Z Y ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y Z O G H id                    		id
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y Z O G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id G O Z Y ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y Z O G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id O Z Y ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y Z O                           		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id Z Y ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id Y ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ] Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] H G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G H ]                                 		]
 $ C ; } R ; } E ; statBlock else } E ; ) G H                                   		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] G ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; ) G                                     		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; )                                       		)
 $ C ; } R ; } E ; statBlock else } E ; 		;
 $ C ; } R ; } E ; statBlock else } E   		r16:E → assignStat ; E  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; assignStat ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; assignStat                              		r21:assignStat → variable assignOp expr     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; variable assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp variable                  		r33:variable → id H G   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H id                    		id
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H                       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id indice H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H indice                		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ arithExpr ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] arithExpr [         		[
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] arithExpr           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ term Y ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y term              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ factor Z Y ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y Z factor          		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id H G O Z Y ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y Z O G H id        		id
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y Z O G H           		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id G O Z Y ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y Z O G             		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id O Z Y ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y Z O               		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id Z Y ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y Z                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id Y ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ] Y                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] H G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H ]                     		]
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] G assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] assignOp expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr assignOp                           		r46:assignOp → =        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = expr ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; expr =                                  		=
 $ C ; } R ; } E ; statBlock else } E ; expr                                    		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = arithExpr X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X arithExpr                             		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = term Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y term                                		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = factor Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z factor                            		r31:factor → ( arithExpr )                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( arithExpr ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) arithExpr (                     		(
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) arithExpr                       		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( term Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y term                          		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( factor Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z factor                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H id                    		id
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H                       		r35:H → indice H        		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id indice H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H indice                		r37:indice → [ arithExpr ]                  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ arithExpr ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr [         		[
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] arithExpr           		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ term Y ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y term              		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ factor Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z factor          		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id H G O Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z O G H id        		id
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z O G H           		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id G O Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z O G             		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id O Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z O               		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id Z Y ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y Z                 		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id Y ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ] Y                   		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H ]                     		]
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O                           		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z                             		r30:Z → multOp factor Z 		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] multOp factor Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z factor multOp               		r49:multOp → *          		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * factor Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z factor *                    		*
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z factor                      		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id H G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H id                    		id
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G H                       		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id G O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O G                         		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id O Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z O                           		r32:O → ( aParams )     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( aParams ) Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z ) aParams (                 		(
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z ) aParams                   		r42:aParams → ε         		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) Z Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z )                           		)
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y Z                             		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) Y ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z ) Y                               		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) Z Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y Z )                                 		)
 $ C ; } R ; } E ; statBlock else } E ; X Y Z                                   		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) Y X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X Y                                     		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) X ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; X                                       		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; E } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else } E ; 		;
 $ C ; } R ; } E ; statBlock else } E   		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else statBlock ; E } ; R } ; C
 $ C ; } R ; } E ; statBlock else }     		}
 $ C ; } R ; } E ; statBlock else       		else
 $ C ; } R ; } E ; statBlock            		r22:statBlock → { E }   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { E } ; E } ; R } ; C
 $ C ; } R ; } E ; } E {                		{
 $ C ; } R ; } E ; } E                  		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; E } ; R } ; C
 $ C ; } R ; } E ; }                    		}
 $ C ; } R ; } E ;                      		;
 $ C ; } R ; } E                        		r16:E → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; R } ; C
 $ C ; } R ; }                          		}
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → L R             		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; L R } ; C
 $ C ; } R L                            		r13:L → statement       		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; statement R } ; C
 $ C ; } R statement                    		r20:statement → return ( expr ) ;           		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( expr ) ; R } ; C
 $ C ; } R ; ) expr ( return            		return
 $ C ; } R ; ) expr (                   		(
 $ C ; } R ; ) expr                     		r23:expr → arithExpr X  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( arithExpr X ) ; R } ; C
 $ C ; } R ; ) X arithExpr              		r26:arithExpr → term Y  		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( term Y X ) ; R } ; C
 $ C ; } R ; ) X Y term                 		r29:term → factor Z     		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( factor Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z factor             		r31:factor → id H G O   		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id H G O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O G H id           		id
 $ C ; } R ; ) X Y Z O G H              		r35:H → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id G O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O G                		r34:G → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id O Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z O                  		r32:O → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id Z Y X ) ; R } ; C
 $ C ; } R ; ) X Y Z                    		r30:Z → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id Y X ) ; R } ; C
 $ C ; } R ; ) X Y                      		r27:Y → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id X ) ; R } ; C
 $ C ; } R ; ) X                        		r24:X → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id ) ; R } ; C
 $ C ; } R ; )                          		)
 $ C ; } R ;                            		;
 $ C ; } R                              		r12:R → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id ) ; } ; C
 $ C ; }                                		}
 $ C ;                                  		;
 $ C                                    		r7:C → ε               		class id { id id ( id id , float id [ integer ] , int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id ( id [ integer ] ) ) / not - id [ integer ] . id ( id and num ) ) then { id = id [ integer ] [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; id = id . id ( id ) ; } ; id id ( id id , float id [ integer ] ) { } ; int id [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] [ integer ] ; float id ; int id ( int id [ integer ] ) { int id ; id = id [ integer ] ; for ( int id = integer ; id > integer ; id = id - integer ) { if ( id [ id ] > id ) then { id = id [ id ] ; } else { } ; put ( id ) ; put ( id ) ; } ; return ( id ) ; } ; int id ; int id ( int id [ integer ] ) { int id ; int id ; id = id [ integer ] ; for ( int id = integer ; id <= integer ; id = ( id ) + integer ) { if ( id [ id ] < id ) then { id = id [ id ] ; } else { } ; } ; return ( id ) ; } ; int id ; } ; program { if ( ( id [ integer ] . id [ integer ] [ integer ] and num ) == not - id ( id [ integer ] and num ) ) then { id = id [ integer ] [ integer ] [ integer ] + not ( + id [ integer ] [ integer ] ( id [ integer ] [ integer ] ) ) ; for ( id id = not id [ integer ] ; id ( id <> integer ) <= not - id [ integer ] ; id [ integer ] = id [ integer ] . id ( ) ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; } else ; } ; } else get ( id ) ; ; return ( id ) ; get ( id [ integer ] . id . id . id [ integer ] ) ; put ( not ( id [ integer ] and num ) ) ; int id ; float id ; id id [ integer ] [ integer ] ; } ; float id ( ) { float id ; id = integer * ( integer + num / num ) ; id = num + ( ( num * num ) - num ) + num ; return ( id ) ; } ; id id ( ) { int id [ integer ] ; int id ; int id ; int id ; id id ; id id [ integer ] [ integer ] [ integer ] [ integer ] ; for ( int id = integer ; id <= integer ; id = id + integer ) { if ( ( id [ integer ] . id [ integer ] and num ) or id [ integer ] . id [ integer ] and num == id [ integer ] + not ( + id [ integer ] ( id [ integer ] ) ) / not - id [ integer ] . id ( id [ integer ] . id and num ) ) then { get ( id ) ; put ( id ) ; get ( id [ id ] ) ; id [ id ] = ( id [ id ] * id ( ) ) ; } else { } ; } ; return ( id ) ; } ; 
 $

Parser Success