prog	$
classDecl	class, program
progBody	$
funcDef	id, float, int, $
funcBody	;
varDeclFunctDef_list	}
varDeclFunctDef_tail	}
indiceIdnestList_tail	=
varDeclStatement_tail	}
funcBody_	}
statement	id, for, if, get, put, return, }, ;, else
assignmentStatment	id, for, if, get, put, return, }, ;, else
restOfStatment	id, for, if, get, put, return, }, ;, else
assignStat	)
statBlock	;, else
expr	,, ;, )
exp_	,, ;, )
relExpr	;
arithExpr	], ), <, <=, <>, ==, >, >=, ;, ,
arithExpr_	], ), <, <=, <>, ==, >, >=, ;, ,
sign	(, floatValue, intValue, not, id, +, -
term	+, -, or, ], ), <, <=, <>, ==, >, >=, ;, ,
term_	+, -, or, ], ), <, <=, <>, ==, >, >=, ;, ,
factor	*, /, and, +, -, or, ], ), <, <=, <>, ==, >, >=, ;, ,
variable_	=, ), *, /, and, +, -, or, ], <, <=, <>, ==, >, >=, ;, ,
idnest_list_	=, ), *, /, and, +, -, or, ], <, <=, <>, ==, >, >=, ;, ,
idnest_	., (, =, ), *, /, and, +, -, or, ], <, <=, <>, ==, >, >=, ;, ,
factor_	=, ), *, /, and, +, -, or, ], <, <=, <>, ==, >, >=, ;, ,
indice	[, ., (, =, ), *, /, and, +, -, or, ], <, <=, <>, ==, >, >=, ;, ,
arraySize	[, ,, ;, )
type	id
typeNumeric	id
fParams	)
aParams	)
fParamsTail	,, )
aParamsTail	,, )
classDecl_list	program
funcDef_list	$
statement_list	}
arraySize_list	,, ;, )
indice_list	., (, =, ), *, /, and, +, -, or, ], <, <=, <>, ==, >, >=, ;, ,
fParamsTail_list	)
aParamsTail_list	)
assignOp	(, floatValue, intValue, not, id, +, -
relOp	(, floatValue, intValue, not, id, +, -
addOp	(, floatValue, intValue, not, id, +, -
multOp	(, floatValue, intValue, not, id, +, -