R1:prog → classDecl_list progBody
R2:classDecl → class id { varDeclFunctDef_list } ;
R3:progBody → program funcBody ; funcDef_list
R4:funcDef → type id ( fParams ) funcBody ;
R5:funcBody → { funcBody_ }
R6:varDeclFunctDef_list → type id varDeclFunctDef_tail
R7:varDeclFunctDef_list → ε
R8:varDeclFunctDef_tail → ( fParams ) funcBody ; varDeclFunctDef_list
R9:varDeclFunctDef_tail → arraySize_list ; varDeclFunctDef_list
R10:indiceIdnestList_tail → . id indiceIdnestList_tail
R11:indiceIdnestList_tail → [ arithExpr ] indiceIdnestList_tail
R12:indiceIdnestList_tail → ε
R13:varDeclStatement_tail → id arraySize_list ; funcBody_
R14:varDeclStatement_tail → indiceIdnestList_tail assignOp expr ; statement_list
R15:funcBody_ → typeNumeric id arraySize_list ; funcBody_
R16:funcBody_ → id varDeclStatement_tail
R17:funcBody_ → restOfStatment statement_list
R18:funcBody_ → ε
R19:statement → assignmentStatment
R20:statement → restOfStatment
R21:assignmentStatment → variable_ assignOp expr ;
R22:restOfStatment → for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ;
R23:restOfStatment → if ( expr ) then statBlock else statBlock ;
R24:restOfStatment → get ( variable_ ) ;
R25:restOfStatment → put ( expr ) ;
R26:restOfStatment → return ( expr ) ;
R27:assignStat → variable_ assignOp expr
R28:statBlock → { statement_list }
R29:statBlock → statement
R30:statBlock → ε
R31:expr → arithExpr exp_
R32:exp_ → relOp arithExpr
R33:exp_ → ε
R34:relExpr → arithExpr relOp arithExpr
R35:arithExpr → term arithExpr_
R36:arithExpr_ → addOp term arithExpr_
R37:arithExpr_ → ε
R38:sign → +
R39:sign → -
R40:term → factor term_
R41:term_ → multOp factor term_
R42:term_ → ε
R43:factor → ( arithExpr )
R44:factor → floatValue
R45:factor → intValue
R46:factor → not factor
R47:factor → variable_ factor_
R48:factor → sign factor
R49:variable_ → id indice_list idnest_list_
R50:idnest_list_ → idnest_ idnest_list_
R51:idnest_list_ → ε
R52:idnest_ → . id indice_list
R53:factor_ → ( aParams )
R54:factor_ → ε
R55:indice → [ arithExpr ]
R56:arraySize → [ intValue ]
R57:type → id
R58:type → typeNumeric
R59:typeNumeric → float
R60:typeNumeric → int
R61:fParams → type id arraySize_list fParamsTail_list
R62:fParams → ε
R63:aParams → expr aParamsTail_list
R64:aParams → ε
R65:fParamsTail → , type id arraySize_list
R66:aParamsTail → , expr
R67:classDecl_list → classDecl classDecl_list
R68:classDecl_list → ε
R69:funcDef_list → funcDef funcDef_list
R70:funcDef_list → ε
R71:statement_list → statement statement_list
R72:statement_list → ε
R73:arraySize_list → arraySize arraySize_list
R74:arraySize_list → ε
R75:indice_list → indice indice_list
R76:indice_list → ε
R77:fParamsTail_list → fParamsTail fParamsTail_list
R78:fParamsTail_list → ε
R79:aParamsTail_list → aParamsTail aParamsTail_list
R80:aParamsTail_list → ε
R81:assignOp → =
R82:relOp → <
R83:relOp → <=
R84:relOp → <>
R85:relOp → ==
R86:relOp → >
R87:relOp → >=
R88:addOp → +
R89:addOp → -
R90:addOp → or
R91:multOp → *
R92:multOp → /
R93:multOp → and
R94:POP
R95:SCAN
